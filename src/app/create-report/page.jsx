// // // // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π app/create-report/page.js
// // // 'use client'
// // // import { useState } from 'react'
// // // import { useRouter } from 'next/navigation'
// // // import Link from 'next/link'
// // // import { useTelegramContext } from '../contexts/TelegramContext'

// // // export default function CreateReportPage() {
// // //     const router = useRouter()
// // //     const { user, tg, isLoading: userLoading } = useTelegramContext()
// // //     const [currentStep, setCurrentStep] = useState(0)
// // //     const [selectedType, setSelectedType] = useState(null)
// // //     const [formData, setFormData] = useState({
// // //         image: null,
// // //         video1: null,
// // //         video2: null,
// // //         data_file: null,
// // //         language: 'ru',
// // //         cubic_metr: false
// // //     })
// // //     const [isGenerating, setIsGenerating] = useState(false)

// // //     const reportTypes = [
// // //         {
// // //             id: 'qogi',
// // //             title: 'QOGI',
// // //             description: '–û—Ç—á–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (CSV —Ñ–∞–π–ª—ã)',
// // //             icon: (
// // //                 <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// // //                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
// // //                 </svg>
// // //             )
// // //         },
// // //         {
// // //             id: 'eyecsite',
// // //             title: 'EYECSITE',
// // //             description: '–û—Ç—á–µ—Ç –¥–ª—è EYECSITE (XLSX —Ñ–∞–π–ª—ã)',
// // //             icon: (
// // //                 <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// // //                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
// // //                 </svg>
// // //             )
// // //         }
// // //     ]

// // //     const steps = [
// // //         { id: 1, title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OPGAL', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ 5 –ú–ë)' },
// // //         { id: 2, title: '–í–∏–¥–µ–æ —Ñ–∞–π–ª', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π .ts —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)' },
// // //         { id: 3, title: 'Enhanced –≤–∏–¥–µ–æ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ç–æ—Ä–æ–π .ts —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)' },
// // //         { id: 4, title: '–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö', desc: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö' },
// // //         { id: 5, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞', desc: '–Ø–∑—ã–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
// // //         { id: 6, title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞', desc: '–°–æ–∑–¥–∞–Ω–∏–µ PDF' }
// // //     ]

// // //     const languages = [
// // //         { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
// // //         { code: 'en', name: 'English' },
// // //         { code: 'uz', name: 'O\'zbek' }
// // //     ]

// // //     const selectType = (type) => {
// // //         setSelectedType(type)
// // //         setCurrentStep(1)
// // //     }

// // //     const nextStep = () => {
// // //         if (currentStep < 6) setCurrentStep(currentStep + 1)
// // //     }

// // //     const prevStep = () => {
// // //         if (currentStep > 1) {
// // //             setCurrentStep(currentStep - 1)
// // //         } else if (currentStep === 1) {
// // //             setCurrentStep(0)
// // //             setSelectedType(null)
// // //         }
// // //     }

// // //     const handleFileUpload = (fieldName, file) => {
// // //         setFormData({ ...formData, [fieldName]: file })
// // //     }

// // //     const validateFile = (file, type) => {
// // //         const maxImageSize = 5 * 1024 * 1024 // 5 MB
// // //         const maxVideoSize = 100 * 1024 * 1024 // 100 MB

// // //         switch (type) {
// // //             case 'image':
// // //                 if (!file.type.startsWith('image/')) {
// // //                     alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (JPG, PNG, GIF)')
// // //                     return false
// // //                 }
// // //                 if (file.size > maxImageSize) {
// // //                     alert('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë')
// // //                     return false
// // //                 }
// // //                 break
// // //             case 'video':
// // //                 if (!file.name.toLowerCase().endsWith('.ts')) {
// // //                     alert('–í–∏–¥–µ–æ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ts')
// // //                     return false
// // //                 }
// // //                 if (file.size > maxVideoSize) {
// // //                     alert('–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ú–ë')
// // //                     return false
// // //                 }
// // //                 break
// // //             case 'data':
// // //                 const isQogi = selectedType === 'qogi'
// // //                 const isEyecsite = selectedType === 'eyecsite'

// // //                 if (isQogi && !file.name.toLowerCase().endsWith('.csv')) {
// // //                     alert('–î–ª—è QOGI –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º CSV —Ñ–∞–π–ª')
// // //                     return false
// // //                 }
// // //                 if (isEyecsite && !file.name.toLowerCase().endsWith('.xlsx')) {
// // //                     alert('–î–ª—è EYECSITE –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ñ–∞–π–ª XLSX')
// // //                     return false
// // //                 }
// // //                 break
// // //         }
// // //         return true
// // //     }

// // //     const generateReport = async () => {
// // //         if (!formData.data_file) {
// // //             console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
// // //             alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö')
// // //             return
// // //         }

// // //         if (!user || !tg?.initData) {
// // //             console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram')
// // //             alert('–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram')
// // //             return
// // //         }

// // //         setIsGenerating(true)

// // //         console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞', selectedType.toUpperCase())
// // //         console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', user.id)
// // //         console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:', {
// // //             selectedType,
// // //             language: formData.language,
// // //             cubic_metr: formData.cubic_metr,
// // //             telegram_user_id: user.id, // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
// // //             imageFileName: formData.image?.name,
// // //             video1FileName: formData.video1?.name,
// // //             video2FileName: formData.video2?.name,
// // //             dataFileName: formData.data_file?.name,
// // //             dataFileSize: formData.data_file?.size,
// // //             dataFileType: formData.data_file?.type
// // //         })

// // //         try {
// // //             const formDataToSend = new FormData()

// // //             // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// // //             formDataToSend.append('data_file', formData.data_file)
// // //             formDataToSend.append('language', formData.language)
// // //             formDataToSend.append('cubic_metr', formData.cubic_metr.toString())

// // //             // –í–ê–ñ–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–¥–∞–µ–º telegram_user_id –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
// // //             formDataToSend.append('telegram_user_id', user.id.toString())

// // //             // –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º init_data –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
// // //             formDataToSend.append('init_data', tg.initData)

// // //             // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
// // //             if (formData.image) {
// // //                 formDataToSend.append('image', formData.image)
// // //             }
// // //             if (formData.video1) {
// // //                 formDataToSend.append('video1', formData.video1)
// // //             }
// // //             if (formData.video2) {
// // //                 formDataToSend.append('video2', formData.video2)
// // //             }

// // //             console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π:')
// // //             for (let [key, value] of formDataToSend.entries()) {
// // //                 if (key === 'init_data') {
// // //                     console.log(`  ${key}:`, value.substring(0, 50) + '...')
// // //                 } else if (key === 'data_file' || key === 'image' || key === 'video1' || key === 'video2') {
// // //                     console.log(`  ${key}:`, {
// // //                         name: value.name,
// // //                         size: value.size,
// // //                         type: value.type
// // //                     })
// // //                 } else {
// // //                     console.log(`  ${key}:`, value)
// // //                 }
// // //             }

// // //             // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
// // //             const apiUrl = selectedType === 'qogi'
// // //                 ? 'https://asmanenergy.com/wp-json/qogi/v1/generate-qogi-report'
// // //                 : 'https://asmanenergy.com/wp-json/qogi/v1/generate-eyecsite-report'

// // //             console.log('üåê API URL:', apiUrl)
// // //             console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', new Date().toISOString())

// // //             const response = await fetch(apiUrl, {
// // //                 method: 'POST',
// // //                 body: formDataToSend,
// // //                 headers: {
// // //                     'Accept': 'application/json',
// // //                 }
// // //             })

// // //             console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:')
// // //             console.log('  Status:', response.status)
// // //             console.log('  StatusText:', response.statusText)
// // //             console.log('  OK:', response.ok)

// // //             let result
// // //             const contentType = response.headers.get('content-type')
// // //             console.log('üìÑ Content-Type:', contentType)

// // //             if (contentType && contentType.includes('application/json')) {
// // //                 result = await response.json()
// // //                 console.log('üìã JSON –æ—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2))
// // //             } else {
// // //                 const textResult = await response.text()
// // //                 console.log('üìã Text –æ—Ç–≤–µ—Ç:', textResult)
// // //                 console.log('‚ùå –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON!')
// // //                 alert(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`)
// // //                 return
// // //             }

// // //             if (result.success) {
// // //                 console.log('‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
// // //                 console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞:', {
// // //                     report_id: result.report_id,
// // //                     file_path: result.file_path,
// // //                     download_url: result.download_url
// // //                 })

// // //                 alert(`–û—Ç—á–µ—Ç ${selectedType.toUpperCase()} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: ${result.report_id}`)

// // //                 // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ü–ï–†–ï–î —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
// // //                 console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É')
// // //                 setFormData({
// // //                     image: null,
// // //                     video1: null,
// // //                     video2: null,
// // //                     data_file: null,
// // //                     language: 'ru',
// // //                     cubic_metr: false
// // //                 })
// // //                 setCurrentStep(0)
// // //                 setSelectedType(null)

// // //                 // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏
// // //                 console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏')
// // //                 router.push('/history')
// // //             } else {
// // //                 console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç API:', result)
// // //                 alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
// // //             }
// // //         } catch (error) {
// // //             console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error)
// // //             alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.')
// // //         } finally {
// // //             console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
// // //             setIsGenerating(false)
// // //         }
// // //     }

// // //     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
// // //     if (userLoading) {
// // //         return (
// // //             <div className="p-6 pb-24">
// // //                 <div className="flex items-center justify-center py-12">
// // //                     <div className="w-8 h-8 border-4 border-emerald-200 border-t-emerald-800 rounded-full animate-spin"></div>
// // //                 </div>
// // //             </div>
// // //         )
// // //     }

// // //     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
// // //     if (!user) {
// // //         return (
// // //             <div className="p-6 pb-24">
// // //                 <div className="bg-red-50 border border-red-200 rounded-xl p-4">
// // //                     <div className="flex items-center">
// // //                         <svg className="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
// // //                             <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
// // //                         </svg>
// // //                         <span className="text-red-800 text-sm">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</span>
// // //                     </div>
// // //                 </div>
// // //             </div>
// // //         )
// // //     }

// // //     const canProceedToNextStep = () => {
// // //         switch (currentStep) {
// // //             case 1: // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
// // //                 return true
// // //             case 2: // –í–∏–¥–µ–æ 1 - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ  
// // //                 return true
// // //             case 3: // –í–∏–¥–µ–æ 2 - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
// // //                 return true
// // //             case 4: // –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// // //                 return !!formData.data_file
// // //             case 5: // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏
// // //                 return true
// // //             default:
// // //                 return true
// // //         }
// // //     }

// // //     return (
// // //         <div className="p-6 pb-24">
// // //             {/* Header */}
// // //             <div className="flex items-center justify-between mb-8">
// // //                 <button
// // //                     onClick={() => currentStep === 0 ? window.history.back() : prevStep()}
// // //                     className="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center"
// // //                     disabled={isGenerating}
// // //                 >
// // //                     <svg className="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
// // //                         <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
// // //                     </svg>
// // //                 </button>
// // //                 <h1 className="text-xl font-semibold text-gray-900">
// // //                     {currentStep === 0 ? '–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞'}
// // //                 </h1>
// // //                 <div className="w-10"></div>
// // //             </div>

// // //             {/* User Info */}
// // //             {/* <div className="bg-emerald-50 border border-emerald-200 rounded-xl p-4 mb-6">
// // //                 <div className="flex items-center gap-3">
// // //                     <div className="w-10 h-10 bg-emerald-800 rounded-full flex items-center justify-center text-white font-semibold">
// // //                         {user.first_name?.[0] || 'U'}
// // //                     </div>
// // //                     <div>
// // //                         <div className="font-medium text-emerald-900">
// // //                             {user.first_name} {user.last_name}
// // //                         </div>
// // //                         <div className="text-sm text-emerald-700">
// // //                             ID: {user.id}
// // //                         </div>
// // //                     </div>
// // //                 </div>
// // //             </div> */}

// // //             {/* Type Selection */}
// // //             {currentStep === 0 && (
// // //                 <div className="space-y-6">
// // //                     <div className="text-center mb-8">
// // //                         <h2 className="text-2xl font-bold text-gray-900 mb-2">
// // //                             –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
// // //                         </h2>
// // //                         <p className="text-gray-600">
// // //                             –ö–∞–∫–æ–π –æ—Ç—á–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?
// // //                         </p>
// // //                     </div>

// // //                     <div className="space-y-4">
// // //                         {reportTypes.map((type) => (
// // //                             <button
// // //                                 key={type.id}
// // //                                 onClick={() => selectType(type.id)}
// // //                                 className="w-full card transition-shadow text-left"
// // //                             >
// // //                                 <div className="flex items-center">
// // //                                     <div className="w-16 h-16 bg-emerald-100 rounded-2xl flex items-center justify-center mr-4">
// // //                                         {type.icon}
// // //                                     </div>
// // //                                     <div className="flex-1">
// // //                                         <h3 className="text-lg font-semibold text-gray-900 mb-1">
// // //                                             {type.title}
// // //                                         </h3>
// // //                                         <p className="text-gray-600 text-sm">
// // //                                             {type.description}
// // //                                         </p>
// // //                                     </div>
// // //                                     <div className="w-6 h-6 text-gray-400">
// // //                                         <svg fill="currentColor" viewBox="0 0 20 20">
// // //                                             <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
// // //                                         </svg>
// // //                                     </div>
// // //                                 </div>
// // //                             </button>
// // //                         ))}
// // //                     </div>
// // //                 </div>
// // //             )}

// // //             {/* File Upload and Settings Steps */}
// // //             {currentStep > 0 && (
// // //                 <>
// // //                     {/* Progress Bar */}
// // //                     <div className="mb-8">
// // //                         <div className="flex items-center justify-between mb-2">
// // //                             <span className="text-sm font-medium text-emerald-800">–®–∞–≥ {currentStep} –∏–∑ 6</span>
// // //                             <div className="flex items-center gap-2">
// // //                                 <span className="text-xs text-gray-600">
// // //                                     {reportTypes.find(t => t.id === selectedType)?.title}
// // //                                 </span>
// // //                                 <span className="text-sm text-gray-600">{Math.round((currentStep / 6) * 100)}%</span>
// // //                             </div>
// // //                         </div>
// // //                         <div className="w-full bg-gray-200 rounded-full h-2">
// // //                             <div
// // //                                 className="bg-emerald-800 h-2 rounded-full transition-all duration-300"
// // //                                 style={{ width: `${(currentStep / 6) * 100}%` }}
// // //                             ></div>
// // //                         </div>
// // //                     </div>

// // //                     {/* Step Content */}
// // //                     <div className="mb-8">
// // //                         <h2 className="text-2xl font-bold text-gray-900 mb-2">
// // //                             {steps[currentStep - 1].title}
// // //                         </h2>
// // //                         <p className="text-gray-600 mb-6">{steps[currentStep - 1].desc}</p>

// // //                         {/* Step 1: Image Upload */}
// // //                         {currentStep === 1 && (
// // //                             <FileUploadArea
// // //                                 type="image"
// // //                                 accept="image/*"
// // //                                 maxSize="5 –ú–ë"
// // //                                 onFileSelect={(file) => {
// // //                                     if (validateFile(file, 'image')) {
// // //                                         handleFileUpload('image', file)
// // //                                     }
// // //                                 }}
// // //                                 selectedFile={formData.image}
// // //                                 optional={true}
// // //                             />
// // //                         )}

// // //                         {/* Step 2: Video 1 Upload */}
// // //                         {currentStep === 2 && (
// // //                             <FileUploadArea
// // //                                 type="video"
// // //                                 accept=".ts"
// // //                                 maxSize="100 –ú–ë"
// // //                                 onFileSelect={(file) => {
// // //                                     if (validateFile(file, 'video')) {
// // //                                         handleFileUpload('video1', file)
// // //                                     }
// // //                                 }}
// // //                                 selectedFile={formData.video1}
// // //                                 optional={true}
// // //                             />
// // //                         )}

// // //                         {/* Step 3: Video 2 Upload */}
// // //                         {currentStep === 3 && (
// // //                             <FileUploadArea
// // //                                 type="video"
// // //                                 accept=".ts"
// // //                                 maxSize="100 –ú–ë"
// // //                                 title="Enhanced –≤–∏–¥–µ–æ"
// // //                                 onFileSelect={(file) => {
// // //                                     if (validateFile(file, 'video')) {
// // //                                         handleFileUpload('video2', file)
// // //                                     }
// // //                                 }}
// // //                                 selectedFile={formData.video2}
// // //                                 optional={true}
// // //                             />
// // //                         )}

// // //                         {/* Step 4: Data File Upload */}
// // //                         {currentStep === 4 && (
// // //                             <FileUploadArea
// // //                                 type="data"
// // //                                 accept={selectedType === 'qogi' ? '.csv' : '.xlsx'}
// // //                                 onFileSelect={(file) => {
// // //                                     if (validateFile(file, 'data')) {
// // //                                         handleFileUpload('data_file', file)
// // //                                     }
// // //                                 }}
// // //                                 selectedFile={formData.data_file}
// // //                                 dataType={selectedType}
// // //                                 optional={false}
// // //                             />
// // //                         )}

// // //                         {/* Step 5: Settings - –£–ë–ò–†–ê–ï–ú –ø–æ–ª–µ telegram_user_id */}
// // //                         {currentStep === 5 && (
// // //                             <div className="space-y-6">
// // //                                 <div>
// // //                                     <label className="block text-sm font-medium text-gray-700 mb-3">
// // //                                         –Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞
// // //                                     </label>
// // //                                     <div className="grid grid-cols-3 gap-3">
// // //                                         {languages.map((lang) => (
// // //                                             <button
// // //                                                 key={lang.code}
// // //                                                 onClick={() => setFormData({ ...formData, language: lang.code })}
// // //                                                 className={`p-3 rounded-xl border-2 text-sm font-medium transition-colors ${formData.language === lang.code
// // //                                                     ? 'border-emerald-800 bg-emerald-50 text-emerald-800'
// // //                                                     : 'border-gray-200 text-gray-700 hover:border-emerald-300'
// // //                                                     }`}
// // //                                             >
// // //                                                 {lang.name}
// // //                                             </button>
// // //                                         ))}
// // //                                     </div>
// // //                                 </div>

// // //                                 <div>
// // //                                     <label className="flex items-center">
// // //                                         <input
// // //                                             type="checkbox"
// // //                                             checked={formData.cubic_metr}
// // //                                             onChange={(e) => setFormData({ ...formData, cubic_metr: e.target.checked })}
// // //                                             className="w-4 h-4 text-emerald-800 border-gray-300 rounded focus:ring-emerald-600"
// // //                                         />
// // //                                         <span className="ml-3 text-sm text-gray-700">
// // //                                             –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º¬≥/—á
// // //                                         </span>
// // //                                     </label>
// // //                                 </div>

// // //                                 {/* –£–ë–†–ê–õ–ò –ø–æ–ª–µ telegram_user_id - –æ–Ω–æ –±–µ—Ä–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ */}
// // //                             </div>
// // //                         )}

// // //                         {/* Step 6: Generation */}
// // //                         {currentStep === 6 && (
// // //                             <div className="text-center">
// // //                                 {isGenerating ? (
// // //                                     <div className="py-4">
// // //                                         <div className="w-16 h-16 border-4 border-emerald-200 border-t-emerald-800 rounded-full animate-spin mx-auto mb-4"></div>
// // //                                         <h3 className="text-lg font-semibold text-gray-900 mb-2">
// // //                                             –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...
// // //                                         </h3>
// // //                                         <p className="text-gray-600">
// // //                                             –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
// // //                                         </p>
// // //                                     </div>
// // //                                 ) : (
// // //                                     <div className="py-4">
// // //                                         <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
// // //                                             <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// // //                                                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
// // //                                             </svg>
// // //                                         </div>
// // //                                         <h3 className="text-lg font-semibold text-gray-900 mb-2">
// // //                                             –ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
// // //                                         </h3>
// // //                                         <p className="text-gray-600 mb-6">
// // //                                             –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
// // //                                         </p>
// // //                                         <div className="bg-gray-50 rounded-xl p-4 text-left">
// // //                                             <div className="space-y-2 text-sm">
// // //                                                 <div className="flex justify-between">
// // //                                                     <span className="text-gray-600">–¢–∏–ø –æ—Ç—á–µ—Ç–∞:</span>
// // //                                                     <span className="font-medium">{selectedType.toUpperCase()}</span>
// // //                                                 </div>
// // //                                                 <div className="flex justify-between">
// // //                                                     <span className="text-gray-600">–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:</span>
// // //                                                     <span className="font-medium">{formData.data_file?.name}</span>
// // //                                                 </div>
// // //                                                 {formData.image && (
// // //                                                     <div className="flex justify-between">
// // //                                                         <span className="text-gray-600">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span>
// // //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// // //                                                     </div>
// // //                                                 )}
// // //                                                 {formData.video1 && (
// // //                                                     <div className="flex justify-between">
// // //                                                         <span className="text-gray-600">–í–∏–¥–µ–æ 1:</span>
// // //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// // //                                                     </div>
// // //                                                 )}
// // //                                                 {formData.video2 && (
// // //                                                     <div className="flex justify-between">
// // //                                                         <span className="text-gray-600">Enhanced –≤–∏–¥–µ–æ:</span>
// // //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// // //                                                     </div>
// // //                                                 )}
// // //                                                 <div className="flex justify-between">
// // //                                                     <span className="text-gray-600">–Ø–∑—ã–∫:</span>
// // //                                                     <span className="font-medium">
// // //                                                         {languages.find(l => l.code === formData.language)?.name}
// // //                                                     </span>
// // //                                                 </div>
// // //                                                 <div className="flex justify-between">
// // //                                                     <span className="text-gray-600">–ö—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã:</span>
// // //                                                     <span className="font-medium">{formData.cubic_metr ? '–î–∞' : '–ù–µ—Ç'}</span>
// // //                                                 </div>
// // //                                             </div>
// // //                                         </div>
// // //                                     </div>
// // //                                 )}
// // //                             </div>
// // //                         )}
// // //                     </div>

// // //                     {/* Navigation Buttons */}
// // //                     <div className="flex gap-4">
// // //                         {currentStep < 6 && (
// // //                             <button
// // //                                 onClick={prevStep}
// // //                                 className="btn-secondary flex-1"
// // //                                 disabled={isGenerating}
// // //                             >
// // //                                 –ù–∞–∑–∞–¥
// // //                             </button>
// // //                         )}

// // //                         {currentStep < 6 ? (
// // //                             <button
// // //                                 onClick={nextStep}
// // //                                 className="btn-primary flex-1"
// // //                                 disabled={!canProceedToNextStep() || isGenerating}
// // //                             >
// // //                                 {currentStep <= 3 ? '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' : '–î–∞–ª–µ–µ'}
// // //                             </button>
// // //                         ) : (
// // //                             <button
// // //                                 onClick={generateReport}
// // //                                 className="btn-primary flex-1"
// // //                                 disabled={isGenerating}
// // //                             >
// // //                                 {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'}
// // //                             </button>
// // //                         )}
// // //                     </div>
// // //                 </>
// // //             )}
// // //         </div>
// // //     )
// // // }

// // // function FileUploadArea({ type, accept, onFileSelect, selectedFile, optional = false, maxSize, title, dataType }) {
// // //     const getIcon = () => {
// // //         switch (type) {
// // //             case 'image':
// // //                 return (
// // //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// // //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
// // //                     </svg>
// // //                 )
// // //             case 'video':
// // //                 return (
// // //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// // //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
// // //                     </svg>
// // //                 )
// // //             case 'data':
// // //                 return (
// // //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// // //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
// // //                     </svg>
// // //                 )
// // //             default:
// // //                 return (
// // //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// // //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
// // //                     </svg>
// // //                 )
// // //         }
// // //     }

// // //     const getTitle = () => {
// // //         if (title) return title

// // //         switch (type) {
// // //             case 'image':
// // //                 return '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OPGAL'
// // //             case 'video':
// // //                 return '–í—ã–±–µ—Ä–∏—Ç–µ .ts –≤–∏–¥–µ–æ —Ñ–∞–π–ª'
// // //             case 'data':
// // //                 return dataType === 'qogi' ? '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª' : '–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª'
// // //             default:
// // //                 return '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
// // //         }
// // //     }

// // //     const getDescription = () => {
// // //         if (selectedFile) return '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω'

// // //         let desc = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞'
// // //         if (maxSize) desc += ` (–¥–æ ${maxSize})`
// // //         if (optional) desc += ' - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'

// // //         return desc
// // //     }

// // //     const getFileFormat = () => {
// // //         switch (type) {
// // //             case 'image':
// // //                 return 'JPG, PNG, GIF'
// // //             case 'video':
// // //                 return '–¢–æ–ª—å–∫–æ .ts —Ñ–∞–π–ª—ã'
// // //             case 'data':
// // //                 return dataType === 'qogi' ? 'CSV —Ñ–∞–π–ª—ã' : 'XLSX —Ñ–∞–π–ª—ã'
// // //             default:
// // //                 return ''
// // //         }
// // //     }

// // //     return (
// // //         <div className="border-2 border-dashed border-[#006045] rounded-xl p-8 text-center hover:border-emerald-400 transition-colors">
// // //             <input
// // //                 type="file"
// // //                 accept={accept}
// // //                 onChange={(e) => onFileSelect(e.target.files[0])}
// // //                 className="hidden"
// // //                 id={`file-${type}-${Date.now()}`}
// // //             />
// // //             <label htmlFor={`file-${type}-${Date.now()}`} className="cursor-pointer">
// // //                 {getIcon()}
// // //                 <div className="text-lg font-medium text-gray-900 mb-2">
// // //                     {selectedFile ? selectedFile.name : getTitle()}
// // //                 </div>
// // //                 <div className="text-sm text-gray-600 mb-2">
// // //                     {getDescription()}
// // //                 </div>
// // //                 {getFileFormat() && (
// // //                     <div className="text-xs text-gray-500 mb-4">
// // //                         –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {getFileFormat()}
// // //                     </div>
// // //                 )}
// // //                 {selectedFile ? (
// // //                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-emerald-100 text-emerald-800">
// // //                         ‚úì –ì–æ—Ç–æ–≤–æ
// // //                     </div>
// // //                 ) : optional ? (
// // //                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-600">
// // //                         –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// // //                     </div>
// // //                 ) : (
// // //                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-orange-100 text-orange-600">
// // //                         –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// // //                     </div>
// // //                 )}
// // //             </label>
// // //         </div>
// // //     )
// // // }









// // // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π app/create-report/page.js
// // 'use client'
// // import { useState } from 'react'
// // import { useRouter } from 'next/navigation'
// // import Link from 'next/link'
// // import { useTelegramContext } from '../contexts/TelegramContext'

// // export default function CreateReportPage() {
// //     const router = useRouter()
// //     const { user, tg, isLoading: userLoading } = useTelegramContext()
// //     const [currentStep, setCurrentStep] = useState(0)
// //     const [selectedType, setSelectedType] = useState(null)
// //     const [formData, setFormData] = useState({
// //         // –î–ª—è QOGI (–∫–∞–∫ –±—ã–ª–æ)
// //         image: null,
// //         video1: null,
// //         video2: null,
// //         data_file: null,

// //         // –î–ª—è EYECSITE (–Ω–æ–≤—ã–µ –ø–æ–ª—è)
// //         video: null,      // –æ–¥–Ω–æ –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–æ video1/video2
// //         docx: null,       // –¥–æ–∫—É–º–µ–Ω—Ç Word
// //         xlsx: null,       // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ Excel

// //         // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
// //         language: 'ru',
// //         cubic_metr: false
// //     })
// //     const [isGenerating, setIsGenerating] = useState(false)

// //     const reportTypes = [
// //         {
// //             id: 'qogi',
// //             title: 'QOGI',
// //             description: '–û—Ç—á–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (CSV —Ñ–∞–π–ª—ã)',
// //             icon: (
// //                 <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
// //                 </svg>
// //             )
// //         },
// //         {
// //             id: 'eyecsite',
// //             title: 'EYECSITE',
// //             description: '–û—Ç—á–µ—Ç –¥–ª—è EYECSITE (XLSX —Ñ–∞–π–ª—ã)',
// //             icon: (
// //                 <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
// //                 </svg>
// //             )
// //         }
// //     ]

// //     const getStepsForType = (type) => {
// //         if (type === 'qogi') {
// //             return [
// //                 { id: 1, title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OPGAL', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ 5 –ú–ë)', field: 'image', fileType: 'image', accept: 'image/*', maxSize: '5 –ú–ë', optional: true },
// //                 { id: 2, title: '–ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π .ts —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video1', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
// //                 { id: 3, title: '–í—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ç–æ—Ä–æ–π .ts —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video2', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
// //                 { id: 4, title: '–î–∞–Ω–Ω—ã–µ CSV', desc: '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏', field: 'data_file', fileType: 'data', accept: '.csv', maxSize: '10 –ú–ë', optional: false },
// //                 { id: 5, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞', desc: '–Ø–∑—ã–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
// //                 { id: 6, title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞', desc: '–°–æ–∑–¥–∞–Ω–∏–µ PDF' }
// //             ]
// //         } else if (type === 'eyecsite') {
// //             return [
// //                 { id: 1, title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ 5 –ú–ë)', field: 'image', fileType: 'image', accept: 'image/*', maxSize: '5 –ú–ë', optional: true },
// //                 { id: 2, title: '–í–∏–¥–µ–æ —Ñ–∞–π–ª', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .ts –≤–∏–¥–µ–æ —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
// //                 { id: 3, title: '–î–æ–∫—É–º–µ–Ω—Ç Word', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .docx —Ñ–∞–π–ª (–¥–æ 20 –ú–ë)', field: 'docx', fileType: 'docx', accept: '.docx', maxSize: '20 –ú–ë', optional: true },
// //                 { id: 4, title: '–¢–∞–±–ª–∏—Ü–∞ Excel', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª (–¥–æ 50 –ú–ë)', field: 'data_file', fileType: 'data', accept: '.xlsx', maxSize: '50 –ú–ë', optional: false },
// //                 { id: 5, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞', desc: '–Ø–∑—ã–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
// //                 { id: 6, title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞', desc: '–°–æ–∑–¥–∞–Ω–∏–µ PDF' }
// //             ]
// //         }
// //         return []
// //     }

// //     // –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º steps –∏ totalSteps –ó–î–ï–°–¨
// //     const steps = selectedType ? getStepsForType(selectedType) : []
// //     const totalSteps = steps.length

// //     const languages = [
// //         { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
// //         { code: 'en', name: 'English' },
// //         { code: 'uz', name: 'O\'zbek' }
// //     ]

// //     const selectType = (type) => {
// //         setSelectedType(type)
// //         setCurrentStep(1)
// //     }

// //     const nextStep = () => {
// //         if (currentStep < totalSteps) setCurrentStep(currentStep + 1)
// //     }

// //     const prevStep = () => {
// //         if (currentStep > 1) {
// //             setCurrentStep(currentStep - 1)
// //         } else if (currentStep === 1) {
// //             setCurrentStep(0)
// //             setSelectedType(null)
// //         }
// //     }

// //     const handleFileUpload = (fieldName, file) => {
// //         setFormData({ ...formData, [fieldName]: file })
// //     }

// //     const validateFile = (file, type) => {
// //         const maxImageSize = 5 * 1024 * 1024      // 5 MB
// //         const maxVideoSize = 100 * 1024 * 1024    // 100 MB  
// //         const maxDocxSize = 20 * 1024 * 1024      // 20 MB
// //         const maxXlsxSize = 50 * 1024 * 1024      // 50 MB

// //         switch (type) {
// //             case 'image':
// //                 if (!file.type.startsWith('image/')) {
// //                     alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (JPG, PNG, GIF)')
// //                     return false
// //                 }
// //                 if (file.size > maxImageSize) {
// //                     alert('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë')
// //                     return false
// //                 }
// //                 break

// //             case 'video':
// //                 if (!file.name.toLowerCase().endsWith('.ts')) {
// //                     alert('–í–∏–¥–µ–æ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ts')
// //                     return false
// //                 }
// //                 if (file.size > maxVideoSize) {
// //                     alert('–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ú–ë')
// //                     return false
// //                 }
// //                 break

// //             case 'docx':
// //                 if (!file.name.toLowerCase().endsWith('.docx')) {
// //                     alert('–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx')
// //                     return false
// //                 }
// //                 if (file.size > maxDocxSize) {
// //                     alert('–†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë')
// //                     return false
// //                 }
// //                 break

// //             case 'xlsx':
// //                 if (!file.name.toLowerCase().endsWith('.xlsx')) {
// //                     alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx')
// //                     return false
// //                 }
// //                 if (file.size > maxXlsxSize) {
// //                     alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 –ú–ë')
// //                     return false
// //                 }
// //                 break

// //             case 'data':
// //                 const isQogi = selectedType === 'qogi'
// //                 const isEyecsite = selectedType === 'eyecsite'

// //                 if (isQogi && !file.name.toLowerCase().endsWith('.csv')) {
// //                     alert('–î–ª—è QOGI –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º CSV —Ñ–∞–π–ª')
// //                     return false
// //                 }
// //                 if (isEyecsite && !file.name.toLowerCase().endsWith('.xlsx')) {
// //                     alert('–î–ª—è EYECSITE –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º XLSX —Ñ–∞–π–ª')
// //                     return false
// //                 }
// //                 break
// //         }
// //         return true
// //     }

// //     const generateReport = async () => {
// //         // if (!formData.data_file) {
// //         //     console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
// //         //     alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö')
// //         //     return
// //         // }
// //         if (selectedType === 'qogi' && !formData.data_file) {
// //             console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QOGI –æ—Ç—á–µ—Ç–∞')
// //             alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QOGI –æ—Ç—á–µ—Ç–∞')
// //             return
// //         }

// //         if (!user || !tg?.initData) {
// //             console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram')
// //             alert('–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram')
// //             return
// //         }

// //         setIsGenerating(true)

// //         console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞', selectedType.toUpperCase())
// //         console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', user.id)
// //         console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:', {
// //             selectedType,
// //             language: formData.language,
// //             cubic_metr: formData.cubic_metr,
// //             telegram_user_id: user.id, // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
// //             imageFileName: formData.image?.name,
// //             video1FileName: formData.video1?.name,
// //             video2FileName: formData.video2?.name,
// //             videoFileName: formData.video?.name,
// //             docxFileName: formData.docx?.name,
// //             xlsxFileName: formData.xlsx?.name,
// //             dataFileName: formData.data_file?.name,
// //             dataFileSize: formData.data_file?.size,
// //             dataFileType: formData.data_file?.type
// //         })

// //         try {
// //             const formDataToSend = new FormData()

// //             // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
// //             if (formData.data_file) {
// //                 formDataToSend.append('data_file', formData.data_file)
// //             }
// //             formDataToSend.append('language', formData.language)
// //             formDataToSend.append('cubic_metr', formData.cubic_metr.toString())
// //             formDataToSend.append('telegram_user_id', user.id.toString())
// //             formDataToSend.append('init_data', tg.initData)

// //             // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
// //             if (selectedType === 'qogi') {
// //                 // –î–ª—è QOGI - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
// //                 if (formData.image) {
// //                     formDataToSend.append('image', formData.image)
// //                 }
// //                 if (formData.video1) {
// //                     formDataToSend.append('video1', formData.video1)
// //                 }
// //                 if (formData.video2) {
// //                     formDataToSend.append('video2', formData.video2)
// //                 }
// //             } else if (selectedType === 'eyecsite') {
// //                 // –î–ª—è EYECSITE - –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
// //                 if (formData.image) {
// //                     formDataToSend.append('image', formData.image)
// //                 }
// //                 if (formData.video) {
// //                     formDataToSend.append('video', formData.video)
// //                 }
// //                 if (formData.docx) {
// //                     formDataToSend.append('docx', formData.docx)
// //                 }
// //                 if (formData.xlsx) {
// //                     formDataToSend.append('xlsx', formData.xlsx)
// //                 }
// //             }

// //             // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
// //             console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData –¥–ª—è', selectedType.toUpperCase(), ':')
// //             for (let [key, value] of formDataToSend.entries()) {
// //                 if (key === 'init_data') {
// //                     console.log(`  ${key}:`, value.substring(0, 50) + '...')
// //                 } else if (value instanceof File) {
// //                     console.log(`  ${key}:`, {
// //                         name: value.name,
// //                         size: value.size,
// //                         type: value.type
// //                     })
// //                 } else {
// //                     console.log(`  ${key}:`, value)
// //                 }
// //             }

// //             // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
// //             const apiUrl = selectedType === 'qogi'
// //                 ? 'https://asmanenergy.com/wp-json/qogi/v1/generate-qogi-report'
// //                 : 'https://asmanenergy.com/wp-json/qogi/v1/generate-eyecsite-report'

// //             console.log('üåê API URL:', apiUrl)
// //             console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', new Date().toISOString())

// //             const response = await fetch(apiUrl, {
// //                 method: 'POST',
// //                 body: formDataToSend,
// //                 headers: {
// //                     'Accept': 'application/json',
// //                 }
// //             })

// //             console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:')
// //             console.log('  Status:', response.status)
// //             console.log('  StatusText:', response.statusText)
// //             console.log('  OK:', response.ok)

// //             let result
// //             const contentType = response.headers.get('content-type')
// //             console.log('üìÑ Content-Type:', contentType)

// //             if (contentType && contentType.includes('application/json')) {
// //                 result = await response.json()
// //                 console.log('üìã JSON –æ—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2))
// //             } else {
// //                 const textResult = await response.text()
// //                 console.log('üìã Text –æ—Ç–≤–µ—Ç:', textResult)
// //                 console.log('‚ùå –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON!')
// //                 alert(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`)
// //                 return
// //             }

// //             if (result.success) {
// //                 console.log('‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
// //                 console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞:', {
// //                     report_id: result.report_id,
// //                     file_path: result.file_path,
// //                     download_url: result.download_url
// //                 })

// //                 alert(`–û—Ç—á–µ—Ç ${selectedType.toUpperCase()} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: ${result.report_id}`)

// //                 // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ü–ï–†–ï–î —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
// //                 console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É')
// //                 setFormData({
// //                     image: null,
// //                     video1: null,
// //                     video2: null,
// //                     video: null,
// //                     docx: null,
// //                     xlsx: null,
// //                     data_file: null,
// //                     language: 'ru',
// //                     cubic_metr: false
// //                 })
// //                 setCurrentStep(0)
// //                 setSelectedType(null)

// //                 // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏
// //                 console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏')
// //                 router.push('/history')
// //             } else {
// //                 console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç API:', result)
// //                 alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
// //             }
// //         } catch (error) {
// //             console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error)
// //             alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.')
// //         } finally {
// //             console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
// //             setIsGenerating(false)
// //         }
// //     }

// //     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
// //     if (userLoading) {
// //         return (
// //             <div className="p-6 pb-24">
// //                 <div className="flex items-center justify-center py-12">
// //                     <div className="w-8 h-8 border-4 border-emerald-200 border-t-emerald-800 rounded-full animate-spin"></div>
// //                 </div>
// //             </div>
// //         )
// //     }

// //     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
// //     if (!user) {
// //         return (
// //             <div className="p-6 pb-24">
// //                 <div className="bg-red-50 border border-red-200 rounded-xl p-4">
// //                     <div className="flex items-center">
// //                         <svg className="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
// //                             <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
// //                         </svg>
// //                         <span className="text-red-800 text-sm">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</span>
// //                     </div>
// //                 </div>
// //             </div>
// //         )
// //     }

// //     const canProceedToNextStep = () => {
// //         if (currentStep >= totalSteps) return false

// //         const currentStepData = steps[currentStep - 1]

// //         // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
// //         if (currentStepData?.field) {
// //             const fieldName = currentStepData.field
// //             const isOptional = currentStepData.optional

// //             // –ï—Å–ª–∏ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
// //             if (!isOptional && !formData[fieldName]) {
// //                 return false
// //             }
// //         }

// //         return true
// //     }

// //     return (
// //         <div className="p-6 pb-24">
// //             {/* Header */}
// //             <div className="flex items-center justify-between mb-8">
// //                 <button
// //                     onClick={() => currentStep === 0 ? window.history.back() : prevStep()}
// //                     className="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center"
// //                     disabled={isGenerating}
// //                 >
// //                     <svg className="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
// //                         <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
// //                     </svg>
// //                 </button>
// //                 <h1 className="text-xl font-semibold text-gray-900">
// //                     {currentStep === 0 ? '–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞'}
// //                 </h1>
// //                 <div className="w-10"></div>
// //             </div>

// //             {/* Type Selection */}
// //             {currentStep === 0 && (
// //                 <div className="space-y-6">
// //                     <div className="text-center mb-8">
// //                         <h2 className="text-2xl font-bold text-gray-900 mb-2">
// //                             –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
// //                         </h2>
// //                         <p className="text-gray-600">
// //                             –ö–∞–∫–æ–π –æ—Ç—á–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?
// //                         </p>
// //                     </div>

// //                     <div className="space-y-4">
// //                         {reportTypes.map((type) => (
// //                             <button
// //                                 key={type.id}
// //                                 onClick={() => selectType(type.id)}
// //                                 className="w-full card transition-shadow text-left"
// //                             >
// //                                 <div className="flex items-center">
// //                                     <div className="w-16 h-16 bg-emerald-100 rounded-2xl flex items-center justify-center mr-4">
// //                                         {type.icon}
// //                                     </div>
// //                                     <div className="flex-1">
// //                                         <h3 className="text-lg font-semibold text-gray-900 mb-1">
// //                                             {type.title}
// //                                         </h3>
// //                                         <p className="text-gray-600 text-sm">
// //                                             {type.description}
// //                                         </p>
// //                                     </div>
// //                                     <div className="w-6 h-6 text-gray-400">
// //                                         <svg fill="currentColor" viewBox="0 0 20 20">
// //                                             <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
// //                                         </svg>
// //                                     </div>
// //                                 </div>
// //                             </button>
// //                         ))}
// //                     </div>
// //                 </div>
// //             )}

// //             {/* File Upload and Settings Steps */}
// //             {currentStep > 0 && (
// //                 <>
// //                     {/* Progress Bar */}
// //                     <div className="mb-8">
// //                         <div className="flex items-center justify-between mb-2">
// //                             <span className="text-sm font-medium text-emerald-800">
// //                                 –®–∞–≥ {currentStep} –∏–∑ {totalSteps}
// //                             </span>
// //                             <div className="flex items-center gap-2">
// //                                 <span className="text-xs text-gray-600">
// //                                     {reportTypes.find(t => t.id === selectedType)?.title}
// //                                 </span>
// //                                 <span className="text-sm text-gray-600">
// //                                     {Math.round((currentStep / totalSteps) * 100)}%
// //                                 </span>
// //                             </div>
// //                         </div>
// //                         <div className="w-full bg-gray-200 rounded-full h-2">
// //                             <div
// //                                 className="bg-emerald-800 h-2 rounded-full transition-all duration-300"
// //                                 style={{ width: `${(currentStep / totalSteps) * 100}%` }}
// //                             ></div>
// //                         </div>
// //                     </div>

// //                     {/* Step Content */}
// //                     <div className="mb-8">
// //                         <h2 className="text-2xl font-bold text-gray-900 mb-2">
// //                             {steps[currentStep - 1]?.title}
// //                         </h2>
// //                         <p className="text-gray-600 mb-6">{steps[currentStep - 1]?.desc}</p>

// //                         {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
// //                         {currentStep > 0 && currentStep <= totalSteps - 2 && (() => {
// //                             const step = steps[currentStep - 1]

// //                             // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
// //                             if (step?.field) {
// //                                 return (
// //                                     <FileUploadArea
// //                                         type={step.fileType}
// //                                         accept={step.accept}
// //                                         maxSize={step.maxSize}
// //                                         title={step.title}
// //                                         onFileSelect={(file) => {
// //                                             if (validateFile(file, step.fileType)) {
// //                                                 handleFileUpload(step.field, file)
// //                                             }
// //                                         }}
// //                                         selectedFile={formData[step.field]}
// //                                         optional={step.optional}
// //                                         dataType={selectedType}
// //                                     />
// //                                 )
// //                             }
// //                             return null
// //                         })()}

// //                         {/* –®–∞–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π */}
// //                         {currentStep === totalSteps - 1 && (
// //                             <div className="space-y-6">
// //                                 <div>
// //                                     <label className="block text-sm font-medium text-gray-700 mb-3">
// //                                         –Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞
// //                                     </label>
// //                                     <div className="grid grid-cols-3 gap-3">
// //                                         {languages.map((lang) => (
// //                                             <button
// //                                                 key={lang.code}
// //                                                 onClick={() => setFormData({ ...formData, language: lang.code })}
// //                                                 className={`p-3 rounded-xl border-2 text-sm font-medium transition-colors ${formData.language === lang.code
// //                                                     ? 'border-emerald-800 bg-emerald-50 text-emerald-800'
// //                                                     : 'border-gray-200 text-gray-700 hover:border-emerald-300'
// //                                                     }`}
// //                                             >
// //                                                 {lang.name}
// //                                             </button>
// //                                         ))}
// //                                     </div>
// //                                 </div>

// //                                 <div>
// //                                     <label className="flex items-center">
// //                                         <input
// //                                             type="checkbox"
// //                                             checked={formData.cubic_metr}
// //                                             onChange={(e) => setFormData({ ...formData, cubic_metr: e.target.checked })}
// //                                             className="w-4 h-4 text-emerald-800 border-gray-300 rounded focus:ring-emerald-600"
// //                                         />
// //                                         <span className="ml-3 text-sm text-gray-700">
// //                                             –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º¬≥/—á
// //                                         </span>
// //                                     </label>
// //                                 </div>
// //                             </div>
// //                         )}

// //                         {/* –®–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø–æ—Å–ª–µ–¥–Ω–∏–π */}
// //                         {currentStep === totalSteps && (
// //                             <div className="text-center">
// //                                 {isGenerating ? (
// //                                     <div className="py-4">
// //                                         <div className="w-16 h-16 border-4 border-emerald-200 border-t-emerald-800 rounded-full animate-spin mx-auto mb-4"></div>
// //                                         <h3 className="text-lg font-semibold text-gray-900 mb-2">
// //                                             –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...
// //                                         </h3>
// //                                         <p className="text-gray-600">
// //                                             –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
// //                                         </p>
// //                                     </div>
// //                                 ) : (
// //                                     <div className="py-4">
// //                                         <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
// //                                             <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                                                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
// //                                             </svg>
// //                                         </div>
// //                                         <h3 className="text-lg font-semibold text-gray-900 mb-2">
// //                                             –ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
// //                                         </h3>
// //                                         <p className="text-gray-600 mb-6">
// //                                             –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
// //                                         </p>
// //                                         <div className="bg-gray-50 rounded-xl p-4 text-left">
// //                                             <div className="space-y-2 text-sm">
// //                                                 <div className="flex justify-between">
// //                                                     <span className="text-gray-600">–¢–∏–ø –æ—Ç—á–µ—Ç–∞:</span>
// //                                                     <span className="font-medium">{selectedType?.toUpperCase()}</span>
// //                                                 </div>
// //                                                 {formData.data_file && (
// //                                                     <div className="flex justify-between">
// //                                                         <span className="text-gray-600">–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:</span>
// //                                                         <span className="font-medium">{formData.data_file?.name}</span>
// //                                                     </div>
// //                                                 )}
// //                                                 {formData.image && (
// //                                                     <div className="flex justify-between">
// //                                                         <span className="text-gray-600">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span>
// //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// //                                                     </div>
// //                                                 )}
// //                                                 {formData.video1 && (
// //                                                     <div className="flex justify-between">
// //                                                         <span className="text-gray-600">–í–∏–¥–µ–æ 1:</span>
// //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// //                                                     </div>
// //                                                 )}
// //                                                 {formData.video2 && (
// //                                                     <div className="flex justify-between">
// //                                                         <span className="text-gray-600">–í–∏–¥–µ–æ 2:</span>
// //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// //                                                     </div>
// //                                                 )}
// //                                                 {formData.video && (
// //                                                     <div className="flex justify-between">
// //                                                         <span className="text-gray-600">–í–∏–¥–µ–æ:</span>
// //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// //                                                     </div>
// //                                                 )}
// //                                                 {formData.docx && (
// //                                                     <div className="flex justify-between">
// //                                                         <span className="text-gray-600">–î–æ–∫—É–º–µ–Ω—Ç:</span>
// //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// //                                                     </div>
// //                                                 )}
// //                                                 {formData.xlsx && (
// //                                                     <div className="flex justify-between">
// //                                                         <span className="text-gray-600">–¢–∞–±–ª–∏—Ü–∞ Excel:</span>
// //                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
// //                                                     </div>
// //                                                 )}
// //                                                 <div className="flex justify-between">
// //                                                     <span className="text-gray-600">–Ø–∑—ã–∫:</span>
// //                                                     <span className="font-medium">
// //                                                         {languages.find(l => l.code === formData.language)?.name}
// //                                                     </span>
// //                                                 </div>
// //                                                 <div className="flex justify-between">
// //                                                     <span className="text-gray-600">–ö—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã:</span>
// //                                                     <span className="font-medium">{formData.cubic_metr ? '–î–∞' : '–ù–µ—Ç'}</span>
// //                                                 </div>
// //                                             </div>
// //                                         </div>
// //                                     </div>
// //                                 )}
// //                             </div>
// //                         )}
// //                     </div>

// //                     {/* Navigation Buttons */}
// //                     <div className="flex gap-4">
// //                         {currentStep < totalSteps && (
// //                             <button
// //                                 onClick={prevStep}
// //                                 className="btn-secondary flex-1"
// //                                 disabled={isGenerating}
// //                             >
// //                                 –ù–∞–∑–∞–¥
// //                             </button>
// //                         )}

// //                         {currentStep < totalSteps ? (
// //                             <button
// //                                 onClick={nextStep}
// //                                 className="btn-primary flex-1"
// //                                 disabled={!canProceedToNextStep() || isGenerating}
// //                             >
// //                                 {steps[currentStep - 1]?.optional ? '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' : '–î–∞–ª–µ–µ'}
// //                             </button>
// //                         ) : (
// //                             <button
// //                                 onClick={generateReport}
// //                                 className="btn-primary flex-1"
// //                                 disabled={isGenerating}
// //                             >
// //                                 {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'}
// //                             </button>
// //                         )}
// //                     </div>
// //                 </>
// //             )}
// //         </div>
// //     )
// // }

// // function FileUploadArea({ type, accept, onFileSelect, selectedFile, optional = false, maxSize, title, dataType }) {
// //     // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –≤ getIcon()
// //     const getIcon = () => {
// //         switch (type) {
// //             case 'image':
// //                 return (
// //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
// //                     </svg>
// //                 )
// //             case 'video':
// //                 return (
// //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
// //                     </svg>
// //                 )
// //             case 'docx':
// //                 return (
// //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
// //                     </svg>
// //                 )
// //             case 'xlsx':
// //                 return (
// //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
// //                     </svg>
// //                 )
// //             case 'data':
// //                 return (
// //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
// //                     </svg>
// //                 )
// //             default:
// //                 return (
// //                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
// //                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
// //                     </svg>
// //                 )
// //         }
// //     }

// //     const getTitle = () => {
// //         if (title) return title

// //         switch (type) {
// //             case 'image':
// //                 return '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OPGAL'
// //             case 'video':
// //                 return '–í—ã–±–µ—Ä–∏—Ç–µ .ts –≤–∏–¥–µ–æ —Ñ–∞–π–ª'
// //             case 'docx':
// //                 return '–í—ã–±–µ—Ä–∏—Ç–µ .docx –¥–æ–∫—É–º–µ–Ω—Ç'
// //             case 'xlsx':
// //                 return '–í—ã–±–µ—Ä–∏—Ç–µ .xlsx —Ñ–∞–π–ª'
// //             case 'data':
// //                 return dataType === 'qogi' ? '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª' : '–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª'
// //             default:
// //                 return '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
// //         }
// //     }

// //     const getDescription = () => {
// //         if (selectedFile) return '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω'

// //         let desc = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞'
// //         if (maxSize) desc += ` (–¥–æ ${maxSize})`
// //         if (optional) desc += ' - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'

// //         return desc
// //     }

// //     // –û–±–Ω–æ–≤–∏—Ç—å getFileFormat()
// //     const getFileFormat = () => {
// //         switch (type) {
// //             case 'image':
// //                 return 'JPG, PNG, GIF'
// //             case 'video':
// //                 return '–¢–æ–ª—å–∫–æ .ts —Ñ–∞–π–ª—ã'
// //             case 'docx':
// //                 return '–¢–æ–ª—å–∫–æ .docx —Ñ–∞–π–ª—ã'
// //             case 'xlsx':
// //                 return '–¢–æ–ª—å–∫–æ .xlsx —Ñ–∞–π–ª—ã'
// //             case 'data':
// //                 return dataType === 'qogi' ? 'CSV —Ñ–∞–π–ª—ã' : 'XLSX —Ñ–∞–π–ª—ã'
// //             default:
// //                 return ''
// //         }
// //     }

// //     return (
// //         <div className="border-2 border-dashed border-[#006045] rounded-xl p-8 text-center hover:border-emerald-400 transition-colors">
// //             <input
// //                 type="file"
// //                 accept={accept}
// //                 onChange={(e) => onFileSelect(e.target.files[0])}
// //                 className="hidden"
// //                 id={`file-${type}-${Date.now()}`}
// //             />
// //             <label htmlFor={`file-${type}-${Date.now()}`} className="cursor-pointer">
// //                 {getIcon()}
// //                 <div className="text-lg font-medium text-gray-900 mb-2">
// //                     {selectedFile ? selectedFile.name : getTitle()}
// //                 </div>
// //                 <div className="text-sm text-gray-600 mb-2">
// //                     {getDescription()}
// //                 </div>
// //                 {getFileFormat() && (
// //                     <div className="text-xs text-gray-500 mb-4">
// //                         –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {getFileFormat()}
// //                     </div>
// //                 )}
// //                 {selectedFile ? (
// //                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-emerald-100 text-emerald-800">
// //                         ‚úì –ì–æ—Ç–æ–≤–æ
// //                     </div>
// //                 ) : optional ? (
// //                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-600">
// //                         –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// //                     </div>
// //                 ) : (
// //                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-orange-100 text-orange-600">
// //                         –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
// //                     </div>
// //                 )}
// //             </label>
// //         </div>
// //     )
// // }









// // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π app/create-report/page.js
// 'use client'
// import { useState } from 'react'
// import { useRouter } from 'next/navigation'
// import Link from 'next/link'
// import { useTelegramContext } from '../contexts/TelegramContext'

// export default function CreateReportPage() {
//     const router = useRouter()
//     const { user, tg, isLoading: userLoading } = useTelegramContext()
//     const [currentStep, setCurrentStep] = useState(0)
//     const [selectedType, setSelectedType] = useState(null)
//     const [formData, setFormData] = useState({
//         // –î–ª—è QOGI (–∫–∞–∫ –±—ã–ª–æ)
//         image: null,
//         video1: null,
//         video2: null,
//         data_file: null,

//         // –î–ª—è EYECSITE (–Ω–æ–≤—ã–µ –ø–æ–ª—è)
//         video: null,      // –æ–¥–Ω–æ –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–æ video1/video2
//         docx: null,       // –¥–æ–∫—É–º–µ–Ω—Ç Word
//         xlsx: null,       // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ Excel

//         // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
//         language: 'ru',
//         cubic_metr: false
//     })

//     const [uploadProgress, setUploadProgress] = useState({
//         loaded: 0,
//         total: 0,
//         progress: 0,
//         isUploading: false
//     })

//     const [notification, setNotification] = useState(null) // { type: 'success' | 'error', message: '', reportId?: number }

//     const [isGenerating, setIsGenerating] = useState(false)

//     const reportTypes = [
//         {
//             id: 'qogi',
//             title: 'QOGI',
//             description: '–û—Ç—á–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (CSV —Ñ–∞–π–ª—ã)',
//             icon: (
//                 <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
//                 </svg>
//             )
//         },
//         {
//             id: 'eyecsite',
//             title: 'EYECSITE',
//             description: '–û—Ç—á–µ—Ç –¥–ª—è EYECSITE (XLSX —Ñ–∞–π–ª—ã)',
//             icon: (
//                 <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
//                 </svg>
//             )
//         }
//     ]

//     const getStepsForType = (type) => {
//         if (type === 'qogi') {
//             return [
//                 { id: 1, title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OPGAL', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ 5 –ú–ë)', field: 'image', fileType: 'image', accept: 'image/*', maxSize: '5 –ú–ë', optional: true },
//                 { id: 2, title: '–ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π .ts —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video1', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
//                 { id: 3, title: '–í—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ç–æ—Ä–æ–π .ts —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video2', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
//                 { id: 4, title: '–î–∞–Ω–Ω—ã–µ CSV', desc: '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏', field: 'data_file', fileType: 'data', accept: '.csv', maxSize: '10 –ú–ë', optional: false },
//                 { id: 5, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞', desc: '–Ø–∑—ã–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
//                 { id: 6, title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞', desc: '–°–æ–∑–¥–∞–Ω–∏–µ PDF' }
//             ]
//         } else if (type === 'eyecsite') {
//             return [
//                 { id: 1, title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ 5 –ú–ë)', field: 'image', fileType: 'image', accept: 'image/*', maxSize: '5 –ú–ë', optional: true },
//                 { id: 2, title: '–í–∏–¥–µ–æ —Ñ–∞–π–ª', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .ts –≤–∏–¥–µ–æ —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
//                 { id: 3, title: '–î–æ–∫—É–º–µ–Ω—Ç Word', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .docx —Ñ–∞–π–ª (–¥–æ 20 –ú–ë)', field: 'docx', fileType: 'docx', accept: '.docx', maxSize: '20 –ú–ë', optional: true },
//                 { id: 4, title: '–¢–∞–±–ª–∏—Ü–∞ Excel', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª (–¥–æ 50 –ú–ë)', field: 'data_file', fileType: 'data', accept: '.xlsx', maxSize: '50 –ú–ë', optional: false },
//                 { id: 5, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞', desc: '–Ø–∑—ã–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
//                 { id: 6, title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞', desc: '–°–æ–∑–¥–∞–Ω–∏–µ PDF' }
//             ]
//         }
//         return []
//     }

//     // –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º steps –∏ totalSteps –ó–î–ï–°–¨
//     const steps = selectedType ? getStepsForType(selectedType) : []
//     const totalSteps = steps.length

//     const languages = [
//         { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
//         { code: 'en', name: 'English' },
//         { code: 'uz', name: 'O\'zbek' }
//     ]

//     const selectType = (type) => {
//         setSelectedType(type)
//         setCurrentStep(1)
//     }

//     const nextStep = () => {
//         if (currentStep < totalSteps) setCurrentStep(currentStep + 1)
//     }

//     const prevStep = () => {
//         if (currentStep > 1) {
//             setCurrentStep(currentStep - 1)
//         } else if (currentStep === 1) {
//             setCurrentStep(0)
//             setSelectedType(null)
//         }
//     }

//     const handleFileUpload = (fieldName, file) => {
//         setFormData({ ...formData, [fieldName]: file })
//     }

//     const validateFile = (file, type) => {
//         const maxImageSize = 5 * 1024 * 1024      // 5 MB
//         const maxVideoSize = 100 * 1024 * 1024    // 100 MB  
//         const maxDocxSize = 20 * 1024 * 1024      // 20 MB
//         const maxXlsxSize = 50 * 1024 * 1024      // 50 MB

//         switch (type) {
//             case 'image':
//                 if (!file.type.startsWith('image/')) {
//                     alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (JPG, PNG, GIF)')
//                     return false
//                 }
//                 if (file.size > maxImageSize) {
//                     alert('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë')
//                     return false
//                 }
//                 break

//             case 'video':
//                 if (!file.name.toLowerCase().endsWith('.ts')) {
//                     alert('–í–∏–¥–µ–æ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ts')
//                     return false
//                 }
//                 if (file.size > maxVideoSize) {
//                     alert('–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ú–ë')
//                     return false
//                 }
//                 break

//             case 'docx':
//                 if (!file.name.toLowerCase().endsWith('.docx')) {
//                     alert('–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx')
//                     return false
//                 }
//                 if (file.size > maxDocxSize) {
//                     alert('–†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë')
//                     return false
//                 }
//                 break

//             case 'xlsx':
//                 if (!file.name.toLowerCase().endsWith('.xlsx')) {
//                     alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx')
//                     return false
//                 }
//                 if (file.size > maxXlsxSize) {
//                     alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 –ú–ë')
//                     return false
//                 }
//                 break

//             case 'data':
//                 const isQogi = selectedType === 'qogi'
//                 const isEyecsite = selectedType === 'eyecsite'

//                 if (isQogi && !file.name.toLowerCase().endsWith('.csv')) {
//                     alert('–î–ª—è QOGI –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º CSV —Ñ–∞–π–ª')
//                     return false
//                 }
//                 if (isEyecsite && !file.name.toLowerCase().endsWith('.xlsx')) {
//                     alert('–î–ª—è EYECSITE –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º XLSX —Ñ–∞–π–ª')
//                     return false
//                 }
//                 break
//         }
//         return true
//     }

//     const generateReport = async () => {
//         // if (!formData.data_file) {
//         //     console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
//         //     alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö')
//         //     return
//         // }
//         if (selectedType === 'qogi' && !formData.data_file) {
//             console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QOGI –æ—Ç—á–µ—Ç–∞')
//             alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QOGI –æ—Ç—á–µ—Ç–∞')
//             return
//         }

//         if (!user || !tg?.initData) {
//             console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram')
//             alert('–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram')
//             return
//         }

//         setIsGenerating(true)

//         console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞', selectedType.toUpperCase())
//         console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', user.id)
//         console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:', {
//             selectedType,
//             language: formData.language,
//             cubic_metr: formData.cubic_metr,
//             telegram_user_id: user.id, // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
//             imageFileName: formData.image?.name,
//             video1FileName: formData.video1?.name,
//             video2FileName: formData.video2?.name,
//             videoFileName: formData.video?.name,
//             docxFileName: formData.docx?.name,
//             xlsxFileName: formData.xlsx?.name,
//             dataFileName: formData.data_file?.name,
//             dataFileSize: formData.data_file?.size,
//             dataFileType: formData.data_file?.type
//         })

//         try {
//             const formDataToSend = new FormData()

//             // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
//             if (formData.data_file) {
//                 formDataToSend.append('data_file', formData.data_file)
//             }
//             formDataToSend.append('language', formData.language)
//             formDataToSend.append('cubic_metr', formData.cubic_metr.toString())
//             formDataToSend.append('telegram_user_id', user.id.toString())
//             formDataToSend.append('init_data', tg.initData)

//             // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
//             if (selectedType === 'qogi') {
//                 // –î–ª—è QOGI - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
//                 if (formData.image) {
//                     formDataToSend.append('image', formData.image)
//                 }
//                 if (formData.video1) {
//                     formDataToSend.append('video1', formData.video1)
//                 }
//                 if (formData.video2) {
//                     formDataToSend.append('video2', formData.video2)
//                 }
//             } else if (selectedType === 'eyecsite') {
//                 // –î–ª—è EYECSITE - –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
//                 if (formData.image) {
//                     formDataToSend.append('image', formData.image)
//                 }
//                 if (formData.video) {
//                     formDataToSend.append('video', formData.video)
//                 }
//                 if (formData.docx) {
//                     formDataToSend.append('docx', formData.docx)
//                 }
//                 if (formData.xlsx) {
//                     formDataToSend.append('xlsx', formData.xlsx)
//                 }
//             }

//             // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
//             console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData –¥–ª—è', selectedType.toUpperCase(), ':')
//             for (let [key, value] of formDataToSend.entries()) {
//                 if (key === 'init_data') {
//                     console.log(`  ${key}:`, value.substring(0, 50) + '...')
//                 } else if (value instanceof File) {
//                     console.log(`  ${key}:`, {
//                         name: value.name,
//                         size: value.size,
//                         type: value.type
//                     })
//                 } else {
//                     console.log(`  ${key}:`, value)
//                 }
//             }

//             // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
//             const apiUrl = selectedType === 'qogi'
//                 ? 'https://asmanenergy.com/wp-json/qogi/v1/generate-qogi-report'
//                 : 'https://asmanenergy.com/wp-json/qogi/v1/generate-eyecsite-report'

//             console.log('üåê API URL:', apiUrl)
//             console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', new Date().toISOString())

//             setUploadProgress({ loaded: 0, total: 0, progress: 0, isUploading: true })

//             const response = await new Promise((resolve, reject) => {
//                 const xhr = new XMLHttpRequest()

//                 // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
//                 xhr.upload.addEventListener('progress', (e) => {
//                     if (e.lengthComputable) {
//                         const progress = Math.round((e.loaded / e.total) * 100)
//                         console.log(`üì§ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${progress}% (${(e.loaded / 1024 / 1024).toFixed(1)} –∏–∑ ${(e.total / 1024 / 1024).toFixed(1)} –ú–ë)`)

//                         setUploadProgress({
//                             loaded: e.loaded,
//                             total: e.total,
//                             progress: progress,
//                             isUploading: true
//                         })
//                     }
//                 })

//                 xhr.onload = () => {
//                     setUploadProgress(prev => ({ ...prev, isUploading: false }))

//                     const mockResponse = {
//                         status: xhr.status,
//                         statusText: xhr.statusText,
//                         ok: xhr.status >= 200 && xhr.status < 300,
//                         headers: {
//                             get: (name) => xhr.getResponseHeader(name)
//                         },
//                         json: async () => JSON.parse(xhr.responseText),
//                         text: async () => xhr.responseText
//                     }
//                     resolve(mockResponse)
//                 }

//                 xhr.onerror = () => {
//                     setUploadProgress(prev => ({ ...prev, isUploading: false }))
//                     reject(new Error('Network error'))
//                 }

//                 xhr.open('POST', apiUrl)
//                 xhr.setRequestHeader('Accept', 'application/json')
//                 xhr.send(formDataToSend)
//             })

//             console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:')
//             console.log('  Status:', response.status)
//             console.log('  StatusText:', response.statusText)
//             console.log('  OK:', response.ok)

//             let result
//             const contentType = response.headers.get('content-type')
//             console.log('üìÑ Content-Type:', contentType)

//             if (contentType && contentType.includes('application/json')) {
//                 result = await response.json()
//                 console.log('üìã JSON –æ—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2))
//             } else {
//                 const textResult = await response.text()
//                 console.log('üìã Text –æ—Ç–≤–µ—Ç:', textResult)
//                 console.log('‚ùå –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON!')
//                 alert(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`)
//                 return
//             }

//             if (result.success) {
//                 console.log('‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
//                 console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞:', {
//                     report_id: result.report_id,
//                     file_path: result.file_path,
//                     download_url: result.download_url
//                 })

//                 alert(`–û—Ç—á–µ—Ç ${selectedType.toUpperCase()} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: ${result.report_id}`)

//                 // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ü–ï–†–ï–î —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
//                 console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É')
//                 setFormData({
//                     image: null,
//                     video1: null,
//                     video2: null,
//                     video: null,
//                     docx: null,
//                     xlsx: null,
//                     data_file: null,
//                     language: 'ru',
//                     cubic_metr: false
//                 })
//                 setCurrentStep(0)
//                 setSelectedType(null)
//                 setUploadProgress({ loaded: 0, total: 0, progress: 0, isUploading: false })

//                 // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏
//                 console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏')
//                 router.push('/history')
//             } else {
//                 console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç API:', result)
//                 alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
//             }
//         } catch (error) {
//             console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error)
//             alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.')
//             // } finally {
//             //     console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
//             //     setIsGenerating(false)
//             // }
//         } finally {
//             console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
//             setIsGenerating(false)
//             setUploadProgress({ loaded: 0, total: 0, progress: 0, isUploading: false }) // ‚Üê –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
//         }
//     }

//     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
//     if (userLoading) {
//         return (
//             <div className="p-6 pb-24">
//                 <div className="flex items-center justify-center py-12">
//                     <div className="w-8 h-8 border-4 border-emerald-200 border-t-emerald-800 rounded-full animate-spin"></div>
//                 </div>
//             </div>
//         )
//     }

//     // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
//     if (!user) {
//         return (
//             <div className="p-6 pb-24">
//                 <div className="bg-red-50 border border-red-200 rounded-xl p-4">
//                     <div className="flex items-center">
//                         <svg className="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
//                             <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
//                         </svg>
//                         <span className="text-red-800 text-sm">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</span>
//                     </div>
//                 </div>
//             </div>
//         )
//     }

//     const canProceedToNextStep = () => {
//         if (currentStep >= totalSteps) return false

//         const currentStepData = steps[currentStep - 1]

//         // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
//         if (currentStepData?.field) {
//             const fieldName = currentStepData.field
//             const isOptional = currentStepData.optional

//             // –ï—Å–ª–∏ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
//             if (!isOptional && !formData[fieldName]) {
//                 return false
//             }
//         }

//         return true
//     }

//     return (
//         <div className="p-6 pb-24">
//             {/* Header */}
//             <div className="flex items-center justify-between mb-8">
//                 <button
//                     onClick={() => currentStep === 0 ? window.history.back() : prevStep()}
//                     className="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center"
//                     disabled={isGenerating}
//                 >
//                     <svg className="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
//                         <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
//                     </svg>
//                 </button>
//                 <h1 className="text-xl font-semibold text-gray-900">
//                     {currentStep === 0 ? '–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞'}
//                 </h1>
//                 <div className="w-10"></div>
//             </div>

//             {/* Type Selection */}
//             {currentStep === 0 && (
//                 <div className="space-y-6">
//                     <div className="text-center mb-8">
//                         <h2 className="text-2xl font-bold text-gray-900 mb-2">
//                             –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
//                         </h2>
//                         <p className="text-gray-600">
//                             –ö–∞–∫–æ–π –æ—Ç—á–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?
//                         </p>
//                     </div>

//                     <div className="space-y-4">
//                         {reportTypes.map((type) => (
//                             <button
//                                 key={type.id}
//                                 onClick={() => selectType(type.id)}
//                                 className="w-full card transition-shadow text-left"
//                             >
//                                 <div className="flex items-center">
//                                     <div className="w-16 h-16 bg-emerald-100 rounded-2xl flex items-center justify-center mr-4">
//                                         {type.icon}
//                                     </div>
//                                     <div className="flex-1">
//                                         <h3 className="text-lg font-semibold text-gray-900 mb-1">
//                                             {type.title}
//                                         </h3>
//                                         <p className="text-gray-600 text-sm">
//                                             {type.description}
//                                         </p>
//                                     </div>
//                                     <div className="w-6 h-6 text-gray-400">
//                                         <svg fill="currentColor" viewBox="0 0 20 20">
//                                             <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
//                                         </svg>
//                                     </div>
//                                 </div>
//                             </button>
//                         ))}
//                     </div>
//                 </div>
//             )}

//             {/* File Upload and Settings Steps */}
//             {currentStep > 0 && (
//                 <>
//                     {/* Progress Bar */}
//                     <div className="mb-8">
//                         <div className="flex items-center justify-between mb-2">
//                             <span className="text-sm font-medium text-emerald-800">
//                                 –®–∞–≥ {currentStep} –∏–∑ {totalSteps}
//                             </span>
//                             <div className="flex items-center gap-2">
//                                 <span className="text-xs text-gray-600">
//                                     {reportTypes.find(t => t.id === selectedType)?.title}
//                                 </span>
//                                 <span className="text-sm text-gray-600">
//                                     {Math.round((currentStep / totalSteps) * 100)}%
//                                 </span>
//                             </div>
//                         </div>
//                         <div className="w-full bg-gray-200 rounded-full h-2">
//                             <div
//                                 className="bg-emerald-800 h-2 rounded-full transition-all duration-300"
//                                 style={{ width: `${(currentStep / totalSteps) * 100}%` }}
//                             ></div>
//                         </div>
//                     </div>

//                     {/* Step Content */}
//                     <div className="mb-8">
//                         <h2 className="text-2xl font-bold text-gray-900 mb-2">
//                             {steps[currentStep - 1]?.title}
//                         </h2>
//                         <p className="text-gray-600 mb-6">{steps[currentStep - 1]?.desc}</p>

//                         {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
//                         {currentStep > 0 && currentStep <= totalSteps - 2 && (() => {
//                             const step = steps[currentStep - 1]

//                             // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
//                             if (step?.field) {
//                                 return (
//                                     <FileUploadArea
//                                         type={step.fileType}
//                                         accept={step.accept}
//                                         maxSize={step.maxSize}
//                                         title={step.title}
//                                         onFileSelect={(file) => {
//                                             if (validateFile(file, step.fileType)) {
//                                                 handleFileUpload(step.field, file)
//                                             }
//                                         }}
//                                         selectedFile={formData[step.field]}
//                                         optional={step.optional}
//                                         dataType={selectedType}
//                                     />
//                                 )
//                             }
//                             return null
//                         })()}

//                         {/* –®–∞–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π */}
//                         {currentStep === totalSteps - 1 && (
//                             <div className="space-y-6">
//                                 <div>
//                                     <label className="block text-sm font-medium text-gray-700 mb-3">
//                                         –Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞
//                                     </label>
//                                     <div className="grid grid-cols-3 gap-3">
//                                         {languages.map((lang) => (
//                                             <button
//                                                 key={lang.code}
//                                                 onClick={() => setFormData({ ...formData, language: lang.code })}
//                                                 className={`p-3 rounded-xl border-2 text-sm font-medium transition-colors ${formData.language === lang.code
//                                                     ? 'border-emerald-800 bg-emerald-50 text-emerald-800'
//                                                     : 'border-gray-200 text-gray-700 hover:border-emerald-300'
//                                                     }`}
//                                             >
//                                                 {lang.name}
//                                             </button>
//                                         ))}
//                                     </div>
//                                 </div>

//                                 <div>
//                                     <label className="flex items-center">
//                                         <input
//                                             type="checkbox"
//                                             checked={formData.cubic_metr}
//                                             onChange={(e) => setFormData({ ...formData, cubic_metr: e.target.checked })}
//                                             className="w-4 h-4 text-emerald-800 border-gray-300 rounded focus:ring-emerald-600"
//                                         />
//                                         <span className="ml-3 text-sm text-gray-700">
//                                             –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º¬≥/—á
//                                         </span>
//                                     </label>
//                                 </div>
//                             </div>
//                         )}

//                         {/* –®–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø–æ—Å–ª–µ–¥–Ω–∏–π */}
//                         {currentStep === totalSteps && (
//                             <div className="text-center">
//                                 {isGenerating ? (
//                                     <div className="py-4">
//                                         <div className="w-16 h-16 border-4 border-emerald-200 border-t-emerald-800 rounded-full animate-spin mx-auto mb-4"></div>
//                                         <h3 className="text-lg font-semibold text-gray-900 mb-2">
//                                             {uploadProgress.isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...' : '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...'}
//                                         </h3>

//                                         {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
//                                         {uploadProgress.isUploading && uploadProgress.total > 0 && (
//                                             <div className="max-w-md mx-auto mb-4">
//                                                 <div className="flex justify-between text-sm text-gray-600 mb-2">
//                                                     <span>{uploadProgress.progress}%</span>
//                                                     <span>
//                                                         {(uploadProgress.loaded / 1024 / 1024).toFixed(1)} –∏–∑ {(uploadProgress.total / 1024 / 1024).toFixed(1)} –ú–ë
//                                                     </span>
//                                                 </div>
//                                                 <div className="w-full bg-gray-200 rounded-full h-2">
//                                                     <div
//                                                         className="bg-emerald-600 h-2 rounded-full transition-all duration-300"
//                                                         style={{ width: `${uploadProgress.progress}%` }}
//                                                     ></div>
//                                                 </div>
//                                             </div>
//                                         )}

//                                         <p className="text-gray-600">
//                                             {uploadProgress.isUploading ? '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä...' : '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...'}
//                                         </p>
//                                     </div>
//                                 ) : (
//                                     // –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
//                                     <div className="py-4">
//                                         <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
//                                             <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                                                 <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
//                                             </svg>
//                                         </div>
//                                         <h3 className="text-lg font-semibold text-gray-900 mb-2">
//                                             –ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
//                                         </h3>
//                                         <p className="text-gray-600 mb-6">
//                                             –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
//                                         </p>
//                                         <div className="bg-gray-50 rounded-xl p-4 text-left">
//                                             <div className="space-y-2 text-sm">
//                                                 <div className="flex justify-between">
//                                                     <span className="text-gray-600">–¢–∏–ø –æ—Ç—á–µ—Ç–∞:</span>
//                                                     <span className="font-medium">{selectedType?.toUpperCase()}</span>
//                                                 </div>
//                                                 {formData.data_file && (
//                                                     <div className="flex justify-between">
//                                                         <span className="text-gray-600">–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:</span>
//                                                         <span className="font-medium">{formData.data_file?.name}</span>
//                                                     </div>
//                                                 )}
//                                                 {formData.image && (
//                                                     <div className="flex justify-between">
//                                                         <span className="text-gray-600">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span>
//                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
//                                                     </div>
//                                                 )}
//                                                 {formData.video1 && (
//                                                     <div className="flex justify-between">
//                                                         <span className="text-gray-600">–í–∏–¥–µ–æ 1:</span>
//                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
//                                                     </div>
//                                                 )}
//                                                 {formData.video2 && (
//                                                     <div className="flex justify-between">
//                                                         <span className="text-gray-600">–í–∏–¥–µ–æ 2:</span>
//                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
//                                                     </div>
//                                                 )}
//                                                 {formData.video && (
//                                                     <div className="flex justify-between">
//                                                         <span className="text-gray-600">–í–∏–¥–µ–æ:</span>
//                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
//                                                     </div>
//                                                 )}
//                                                 {formData.docx && (
//                                                     <div className="flex justify-between">
//                                                         <span className="text-gray-600">–î–æ–∫—É–º–µ–Ω—Ç:</span>
//                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
//                                                     </div>
//                                                 )}
//                                                 {formData.xlsx && (
//                                                     <div className="flex justify-between">
//                                                         <span className="text-gray-600">–¢–∞–±–ª–∏—Ü–∞ Excel:</span>
//                                                         <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
//                                                     </div>
//                                                 )}
//                                                 <div className="flex justify-between">
//                                                     <span className="text-gray-600">–Ø–∑—ã–∫:</span>
//                                                     <span className="font-medium">
//                                                         {languages.find(l => l.code === formData.language)?.name}
//                                                     </span>
//                                                 </div>
//                                                 <div className="flex justify-between">
//                                                     <span className="text-gray-600">–ö—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã:</span>
//                                                     <span className="font-medium">{formData.cubic_metr ? '–î–∞' : '–ù–µ—Ç'}</span>
//                                                 </div>
//                                             </div>
//                                         </div>
//                                     </div>
//                                 )}
//                             </div>
//                         )}
//                     </div>

//                     {/* Navigation Buttons */}
//                     <div className="flex gap-4">
//                         {currentStep < totalSteps && (
//                             <button
//                                 onClick={prevStep}
//                                 className="btn-secondary flex-1"
//                                 disabled={isGenerating}
//                             >
//                                 –ù–∞–∑–∞–¥
//                             </button>
//                         )}

//                         {currentStep < totalSteps ? (
//                             <button
//                                 onClick={nextStep}
//                                 className="btn-primary flex-1"
//                                 disabled={!canProceedToNextStep() || isGenerating}
//                             >
//                                 {steps[currentStep - 1]?.optional ? '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' : '–î–∞–ª–µ–µ'}
//                             </button>
//                         ) : (
//                             <button
//                                 onClick={generateReport}
//                                 className="btn-primary flex-1"
//                                 disabled={isGenerating}
//                             >
//                                 {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'}
//                             </button>
//                         )}
//                     </div>

//                 </>
//             )}
//         </div>
//     )
// }

// function FileUploadArea({ type, accept, onFileSelect, selectedFile, optional = false, maxSize, title, dataType }) {
//     // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –≤ getIcon()
//     const getIcon = () => {
//         switch (type) {
//             case 'image':
//                 return (
//                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
//                     </svg>
//                 )
//             case 'video':
//                 return (
//                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
//                     </svg>
//                 )
//             case 'docx':
//                 return (
//                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
//                     </svg>
//                 )
//             case 'xlsx':
//                 return (
//                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
//                     </svg>
//                 )
//             case 'data':
//                 return (
//                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
//                     </svg>
//                 )
//             default:
//                 return (
//                     <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
//                         <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
//                     </svg>
//                 )
//         }
//     }

//     const getTitle = () => {
//         if (title) return title

//         switch (type) {
//             case 'image':
//                 return '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OPGAL'
//             case 'video':
//                 return '–í—ã–±–µ—Ä–∏—Ç–µ .ts –≤–∏–¥–µ–æ —Ñ–∞–π–ª'
//             case 'docx':
//                 return '–í—ã–±–µ—Ä–∏—Ç–µ .docx –¥–æ–∫—É–º–µ–Ω—Ç'
//             case 'xlsx':
//                 return '–í—ã–±–µ—Ä–∏—Ç–µ .xlsx —Ñ–∞–π–ª'
//             case 'data':
//                 return dataType === 'qogi' ? '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª' : '–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª'
//             default:
//                 return '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
//         }
//     }

//     const getDescription = () => {
//         if (selectedFile) return '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω'

//         let desc = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞'
//         if (maxSize) desc += ` (–¥–æ ${maxSize})`
//         if (optional) desc += ' - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'

//         return desc
//     }

//     // –û–±–Ω–æ–≤–∏—Ç—å getFileFormat()
//     const getFileFormat = () => {
//         switch (type) {
//             case 'image':
//                 return 'JPG, PNG, GIF'
//             case 'video':
//                 return '–¢–æ–ª—å–∫–æ .ts —Ñ–∞–π–ª—ã'
//             case 'docx':
//                 return '–¢–æ–ª—å–∫–æ .docx —Ñ–∞–π–ª—ã'
//             case 'xlsx':
//                 return '–¢–æ–ª—å–∫–æ .xlsx —Ñ–∞–π–ª—ã'
//             case 'data':
//                 return dataType === 'qogi' ? 'CSV —Ñ–∞–π–ª—ã' : 'XLSX —Ñ–∞–π–ª—ã'
//             default:
//                 return ''
//         }
//     }

//     return (
//         <div className="border-2 border-dashed border-[#006045] rounded-xl p-8 text-center hover:border-emerald-400 transition-colors">
//             <input
//                 type="file"
//                 accept={accept}
//                 onChange={(e) => onFileSelect(e.target.files[0])}
//                 className="hidden"
//                 id={`file-${type}-${Date.now()}`}
//             />
//             <label htmlFor={`file-${type}-${Date.now()}`} className="cursor-pointer">
//                 {getIcon()}
//                 <div className="text-lg font-medium text-gray-900 mb-2">
//                     {selectedFile ? selectedFile.name : getTitle()}
//                 </div>
//                 <div className="text-sm text-gray-600 mb-2">
//                     {getDescription()}
//                 </div>
//                 {getFileFormat() && (
//                     <div className="text-xs text-gray-500 mb-4">
//                         –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {getFileFormat()}
//                     </div>
//                 )}
//                 {selectedFile ? (
//                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-emerald-100 text-emerald-800">
//                         ‚úì –ì–æ—Ç–æ–≤–æ
//                     </div>
//                 ) : optional ? (
//                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-600">
//                         –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
//                     </div>
//                 ) : (
//                     <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-orange-100 text-orange-600">
//                         –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
//                     </div>
//                 )}
//             </label>
//         </div>
//     )
// }












































// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π app/create-report/page.js
'use client'
import { useState } from 'react'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { useTelegramContext } from '../contexts/TelegramContext'

export default function CreateReportPage() {
    const router = useRouter()
    const { user, tg, isLoading: userLoading } = useTelegramContext()
    const [currentStep, setCurrentStep] = useState(0)
    const [selectedType, setSelectedType] = useState(null)
    const [formData, setFormData] = useState({
        // –î–ª—è QOGI (–∫–∞–∫ –±—ã–ª–æ)
        image: null,
        video1: null,
        video2: null,
        data_file: null,

        // –î–ª—è EYECSITE (–Ω–æ–≤—ã–µ –ø–æ–ª—è)
        video: null,      // –æ–¥–Ω–æ –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–æ video1/video2
        docx: null,       // –¥–æ–∫—É–º–µ–Ω—Ç Word
        xlsx: null,       // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ Excel

        // –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        language: 'ru',
        cubic_metr: false
    })

    const [uploadProgress, setUploadProgress] = useState({
        loaded: 0,
        total: 0,
        progress: 0,
        isUploading: false
    })

    const [isGenerating, setIsGenerating] = useState(false)

    const reportTypes = [
        {
            id: 'qogi',
            title: 'QOGI',
            description: '–û—Ç—á–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π (CSV —Ñ–∞–π–ª—ã)',
            icon: (
                <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
            )
        },
        {
            id: 'eyecsite',
            title: 'EYECSITE',
            description: '–û—Ç—á–µ—Ç –¥–ª—è EYECSITE (XLSX —Ñ–∞–π–ª—ã)',
            icon: (
                <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
            )
        }
    ]

    const getStepsForType = (type) => {
        if (type === 'qogi') {
            return [
                { id: 1, title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OPGAL', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ 5 –ú–ë)', field: 'image', fileType: 'image', accept: 'image/*', maxSize: '5 –ú–ë', optional: true },
                { id: 2, title: '–ü–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–µ—Ä–≤—ã–π .ts —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video1', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
                { id: 3, title: '–í—Ç–æ—Ä–æ–µ –≤–∏–¥–µ–æ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤—Ç–æ—Ä–æ–π .ts —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video2', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
                { id: 4, title: '–î–∞–Ω–Ω—ã–µ CSV', desc: '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏', field: 'data_file', fileType: 'data', accept: '.csv', maxSize: '10 –ú–ë', optional: false },
                { id: 5, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞', desc: '–Ø–∑—ã–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
                { id: 6, title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞', desc: '–°–æ–∑–¥–∞–Ω–∏–µ PDF' }
            ]
        } else if (type === 'eyecsite') {
            return [
                { id: 1, title: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ 5 –ú–ë)', field: 'image', fileType: 'image', accept: 'image/*', maxSize: '5 –ú–ë', optional: true },
                { id: 2, title: '–í–∏–¥–µ–æ —Ñ–∞–π–ª', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .ts –≤–∏–¥–µ–æ —Ñ–∞–π–ª (–¥–æ 100 –ú–ë)', field: 'video', fileType: 'video', accept: '.ts', maxSize: '100 –ú–ë', optional: true },
                { id: 3, title: '–î–æ–∫—É–º–µ–Ω—Ç Word', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .docx —Ñ–∞–π–ª (–¥–æ 20 –ú–ë)', field: 'docx', fileType: 'docx', accept: '.docx', maxSize: '20 –ú–ë', optional: true },
                { id: 4, title: '–¢–∞–±–ª–∏—Ü–∞ Excel', desc: '–ó–∞–≥—Ä—É–∑–∏—Ç–µ .xlsx —Ñ–∞–π–ª (–¥–æ 50 –ú–ë)', field: 'data_file', fileType: 'data', accept: '.xlsx', maxSize: '50 –ú–ë', optional: false },
                { id: 5, title: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞', desc: '–Ø–∑—ã–∫ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã' },
                { id: 6, title: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞', desc: '–°–æ–∑–¥–∞–Ω–∏–µ PDF' }
            ]
        }
        return []
    }

    // –í–ê–ñ–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º steps –∏ totalSteps –ó–î–ï–°–¨
    const steps = selectedType ? getStepsForType(selectedType) : []
    const totalSteps = steps.length

    const languages = [
        { code: 'ru', name: '–†—É—Å—Å–∫–∏–π' },
        { code: 'en', name: 'English' },
        { code: 'uz', name: 'O\'zbek' }
    ]

    const selectType = (type) => {
        setSelectedType(type)
        setCurrentStep(1)
    }

    const nextStep = () => {
        if (currentStep < totalSteps) setCurrentStep(currentStep + 1)
    }

    const prevStep = () => {
        if (currentStep > 1) {
            setCurrentStep(currentStep - 1)
        } else if (currentStep === 1) {
            setCurrentStep(0)
            setSelectedType(null)
        }
    }

    const handleFileUpload = (fieldName, file) => {
        setFormData({ ...formData, [fieldName]: file })
    }

    const validateFile = (file, type) => {
        const maxImageSize = 5 * 1024 * 1024      // 5 MB
        const maxVideoSize = 100 * 1024 * 1024    // 100 MB  
        const maxDocxSize = 20 * 1024 * 1024      // 20 MB
        const maxXlsxSize = 50 * 1024 * 1024      // 50 MB

        switch (type) {
            case 'image':
                if (!file.type.startsWith('image/')) {
                    alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º (JPG, PNG, GIF)')
                    return false
                }
                if (file.size > maxImageSize) {
                    alert('–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 –ú–ë')
                    return false
                }
                break

            case 'video':
                if (!file.name.toLowerCase().endsWith('.ts')) {
                    alert('–í–∏–¥–µ–æ —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .ts')
                    return false
                }
                if (file.size > maxVideoSize) {
                    alert('–†–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 100 –ú–ë')
                    return false
                }
                break

            case 'docx':
                if (!file.name.toLowerCase().endsWith('.docx')) {
                    alert('–î–æ–∫—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx')
                    return false
                }
                if (file.size > maxDocxSize) {
                    alert('–†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 –ú–ë')
                    return false
                }
                break

            case 'xlsx':
                if (!file.name.toLowerCase().endsWith('.xlsx')) {
                    alert('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx')
                    return false
                }
                if (file.size > maxXlsxSize) {
                    alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 50 –ú–ë')
                    return false
                }
                break

            case 'data':
                const isQogi = selectedType === 'qogi'
                const isEyecsite = selectedType === 'eyecsite'

                if (isQogi && !file.name.toLowerCase().endsWith('.csv')) {
                    alert('–î–ª—è QOGI –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º CSV —Ñ–∞–π–ª')
                    return false
                }
                if (isEyecsite && !file.name.toLowerCase().endsWith('.xlsx')) {
                    alert('–î–ª—è EYECSITE –æ—Ç—á–µ—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º XLSX —Ñ–∞–π–ª')
                    return false
                }
                break
        }
        return true
    }

    const generateReport = async () => {
        // if (!formData.data_file) {
        //     console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏')
        //     alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö')
        //     return
        // }
        if (selectedType === 'qogi' && !formData.data_file) {
            console.log('‚ùå –ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QOGI –æ—Ç—á–µ—Ç–∞')
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –¥–ª—è QOGI –æ—Ç—á–µ—Ç–∞')
            return
        }

        if (!user || !tg?.initData) {
            console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ Telegram')
            alert('–û—à–∏–±–∫–∞: –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram')
            return
        }

        setIsGenerating(true)

        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞', selectedType.toUpperCase())
        console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Telegram:', user.id)
        console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç—á–µ—Ç–∞:', {
            selectedType,
            language: formData.language,
            cubic_metr: formData.cubic_metr,
            telegram_user_id: user.id, // –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            imageFileName: formData.image?.name,
            video1FileName: formData.video1?.name,
            video2FileName: formData.video2?.name,
            videoFileName: formData.video?.name,
            docxFileName: formData.docx?.name,
            xlsxFileName: formData.xlsx?.name,
            dataFileName: formData.data_file?.name,
            dataFileSize: formData.data_file?.size,
            dataFileType: formData.data_file?.type
        })

        try {
            const formDataToSend = new FormData()

            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if (formData.data_file) {
                formDataToSend.append('data_file', formData.data_file)
            }
            formDataToSend.append('language', formData.language)
            formDataToSend.append('cubic_metr', formData.cubic_metr.toString())
            formDataToSend.append('telegram_user_id', user.id.toString())
            formDataToSend.append('init_data', tg.initData)

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            if (selectedType === 'qogi') {
                // –î–ª—è QOGI - —Å—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞
                if (formData.image) {
                    formDataToSend.append('image', formData.image)
                }
                if (formData.video1) {
                    formDataToSend.append('video1', formData.video1)
                }
                if (formData.video2) {
                    formDataToSend.append('video2', formData.video2)
                }
            } else if (selectedType === 'eyecsite') {
                // –î–ª—è EYECSITE - –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
                if (formData.image) {
                    formDataToSend.append('image', formData.image)
                }
                if (formData.video) {
                    formDataToSend.append('video', formData.video)
                }
                if (formData.docx) {
                    formDataToSend.append('docx', formData.docx)
                }
                if (formData.xlsx) {
                    formDataToSend.append('xlsx', formData.xlsx)
                }
            }

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º FormData –¥–ª—è', selectedType.toUpperCase(), ':')
            for (let [key, value] of formDataToSend.entries()) {
                if (key === 'init_data') {
                    console.log(`  ${key}:`, value.substring(0, 50) + '...')
                } else if (value instanceof File) {
                    console.log(`  ${key}:`, {
                        name: value.name,
                        size: value.size,
                        type: value.type
                    })
                } else {
                    console.log(`  ${key}:`, value)
                }
            }

            // –í—ã–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
            const apiUrl = selectedType === 'qogi'
                ? 'https://asmanenergy.com/wp-json/qogi/v1/generate-qogi-report'
                : 'https://asmanenergy.com/wp-json/qogi/v1/generate-eyecsite-report'

            console.log('üåê API URL:', apiUrl)
            console.log('‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', new Date().toISOString())

            setUploadProgress({ loaded: 0, total: 0, progress: 0, isUploading: true })

            const response = await new Promise((resolve, reject) => {
                const xhr = new XMLHttpRequest()

                // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
                xhr.upload.addEventListener('progress', (e) => {
                    if (e.lengthComputable) {
                        const progress = Math.round((e.loaded / e.total) * 100)
                        console.log(`üì§ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: ${progress}% (${(e.loaded / 1024 / 1024).toFixed(1)} –∏–∑ ${(e.total / 1024 / 1024).toFixed(1)} –ú–ë)`)

                        setUploadProgress({
                            loaded: e.loaded,
                            total: e.total,
                            progress: progress,
                            isUploading: true
                        })
                    }
                })

                xhr.onload = () => {
                    setUploadProgress(prev => ({ ...prev, isUploading: false }))

                    const mockResponse = {
                        status: xhr.status,
                        statusText: xhr.statusText,
                        ok: xhr.status >= 200 && xhr.status < 300,
                        headers: {
                            get: (name) => xhr.getResponseHeader(name)
                        },
                        json: async () => JSON.parse(xhr.responseText),
                        text: async () => xhr.responseText
                    }
                    resolve(mockResponse)
                }

                xhr.onerror = () => {
                    setUploadProgress(prev => ({ ...prev, isUploading: false }))
                    reject(new Error('Network error'))
                }

                xhr.open('POST', apiUrl)
                xhr.setRequestHeader('Accept', 'application/json')
                xhr.send(formDataToSend)
            })

            console.log('üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:')
            console.log('  Status:', response.status)
            console.log('  StatusText:', response.statusText)
            console.log('  OK:', response.ok)

            let result
            const contentType = response.headers.get('content-type')
            console.log('üìÑ Content-Type:', contentType)

            if (contentType && contentType.includes('application/json')) {
                result = await response.json()
                console.log('üìã JSON –æ—Ç–≤–µ—Ç:', JSON.stringify(result, null, 2))
            } else {
                const textResult = await response.text()
                console.log('üìã Text –æ—Ç–≤–µ—Ç:', textResult)
                console.log('‚ùå –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON!')
                alert(`–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.`)
                return
            }

            if (result.success) {
                console.log('‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
                console.log('üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞:', {
                    report_id: result.report_id,
                    file_path: result.file_path,
                    download_url: result.download_url
                })

                alert(`–û—Ç—á–µ—Ç ${selectedType.toUpperCase()} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! ID: ${result.report_id}`)

                // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ü–ï–†–ï–î —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–º
                console.log('üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É')
                setFormData({
                    image: null,
                    video1: null,
                    video2: null,
                    video: null,
                    docx: null,
                    xlsx: null,
                    data_file: null,
                    language: 'ru',
                    cubic_metr: false
                })
                setCurrentStep(0)
                setSelectedType(null)
                setUploadProgress({ loaded: 0, total: 0, progress: 0, isUploading: false })

                // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏
                console.log('üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏—Å—Ç–æ—Ä–∏–∏')
                router.push('/history')
            } else {
                console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ç API:', result)
                alert(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: ${result.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`)
            }
        } catch (error) {
            console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error)
            alert('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.')
            // } finally {
            //     console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
            //     setIsGenerating(false)
            // }
        } finally {
            console.log('üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞')
            setIsGenerating(false)
            setUploadProgress({ loaded: 0, total: 0, progress: 0, isUploading: false }) // ‚Üê –î–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
        }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω
    if (userLoading) {
        return (
            <div className="p-6 pb-24">
                <div className="flex items-center justify-center py-12">
                    <div className="w-8 h-8 border-4 border-emerald-200 border-t-emerald-800 rounded-full animate-spin"></div>
                </div>
            </div>
        )
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
    if (!user) {
        return (
            <div className="p-6 pb-24">
                <div className="bg-red-50 border border-red-200 rounded-xl p-4">
                    <div className="flex items-center">
                        <svg className="w-5 h-5 text-red-600 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                        </svg>
                        <span className="text-red-800 text-sm">–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram</span>
                    </div>
                </div>
            </div>
        )
    }

    const canProceedToNextStep = () => {
        if (currentStep >= totalSteps) return false

        const currentStepData = steps[currentStep - 1]

        // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        if (currentStepData?.field) {
            const fieldName = currentStepData.field
            const isOptional = currentStepData.optional

            // –ï—Å–ª–∏ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω
            if (!isOptional && !formData[fieldName]) {
                return false
            }
        }

        return true
    }

    return (
        <div className="p-6 pb-24">
            {/* Header */}
            <div className="flex items-center justify-between mb-8">
                <button
                    onClick={() => currentStep === 0 ? window.history.back() : prevStep()}
                    className="w-10 h-10 bg-gray-100 rounded-full flex items-center justify-center"
                    disabled={isGenerating}
                >
                    <svg className="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
                    </svg>
                </button>
                <h1 className="text-xl font-semibold text-gray-900">
                    {currentStep === 0 ? '–í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞' : '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞'}
                </h1>
                <div className="w-10"></div>
            </div>

            {/* Type Selection */}
            {currentStep === 0 && (
                <div className="space-y-6">
                    <div className="text-center mb-8">
                        <h2 className="text-2xl font-bold text-gray-900 mb-2">
                            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
                        </h2>
                        <p className="text-gray-600">
                            –ö–∞–∫–æ–π –æ—Ç—á–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?
                        </p>
                    </div>

                    <div className="space-y-4">
                        {reportTypes.map((type) => (
                            <button
                                key={type.id}
                                onClick={() => selectType(type.id)}
                                className="w-full card transition-shadow text-left"
                            >
                                <div className="flex items-center">
                                    <div className="w-16 h-16 bg-emerald-100 rounded-2xl flex items-center justify-center mr-4">
                                        {type.icon}
                                    </div>
                                    <div className="flex-1">
                                        <h3 className="text-lg font-semibold text-gray-900 mb-1">
                                            {type.title}
                                        </h3>
                                        <p className="text-gray-600 text-sm">
                                            {type.description}
                                        </p>
                                    </div>
                                    <div className="w-6 h-6 text-gray-400">
                                        <svg fill="currentColor" viewBox="0 0 20 20">
                                            <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                                        </svg>
                                    </div>
                                </div>
                            </button>
                        ))}
                    </div>
                </div>
            )}

            {/* File Upload and Settings Steps */}
            {currentStep > 0 && (
                <>
                    {/* Progress Bar */}
                    <div className="mb-8">
                        <div className="flex items-center justify-between mb-2">
                            <span className="text-sm font-medium text-emerald-800">
                                –®–∞–≥ {currentStep} –∏–∑ {totalSteps}
                            </span>
                            <div className="flex items-center gap-2">
                                <span className="text-xs text-gray-600">
                                    {reportTypes.find(t => t.id === selectedType)?.title}
                                </span>
                                <span className="text-sm text-gray-600">
                                    {Math.round((currentStep / totalSteps) * 100)}%
                                </span>
                            </div>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                            <div
                                className="bg-emerald-800 h-2 rounded-full transition-all duration-300"
                                style={{ width: `${(currentStep / totalSteps) * 100}%` }}
                            ></div>
                        </div>
                    </div>

                    {/* Step Content */}
                    <div className="mb-8">
                        <h2 className="text-2xl font-bold text-gray-900 mb-2">
                            {steps[currentStep - 1]?.title}
                        </h2>
                        <p className="text-gray-600 mb-6">{steps[currentStep - 1]?.desc}</p>

                        {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ */}
                        {currentStep > 0 && currentStep <= totalSteps - 2 && (() => {
                            const step = steps[currentStep - 1]

                            // –ï—Å–ª–∏ —ç—Ç–æ —à–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
                            if (step?.field) {
                                return (
                                    <FileUploadArea
                                        type={step.fileType}
                                        accept={step.accept}
                                        maxSize={step.maxSize}
                                        title={step.title}
                                        onFileSelect={(file) => {
                                            if (validateFile(file, step.fileType)) {
                                                handleFileUpload(step.field, file)
                                            }
                                        }}
                                        selectedFile={formData[step.field]}
                                        optional={step.optional}
                                        dataType={selectedType}
                                    />
                                )
                            }
                            return null
                        })()}

                        {/* –®–∞–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –ø—Ä–µ–¥–ø–æ—Å–ª–µ–¥–Ω–∏–π */}
                        {currentStep === totalSteps - 1 && (
                            <div className="space-y-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-3">
                                        –Ø–∑—ã–∫ –æ—Ç—á–µ—Ç–∞
                                    </label>
                                    <div className="grid grid-cols-3 gap-3">
                                        {languages.map((lang) => (
                                            <button
                                                key={lang.code}
                                                onClick={() => setFormData({ ...formData, language: lang.code })}
                                                className={`p-3 rounded-xl border-2 text-sm font-medium transition-colors ${formData.language === lang.code
                                                    ? 'border-emerald-800 bg-emerald-50 text-emerald-800'
                                                    : 'border-gray-200 text-gray-700 hover:border-emerald-300'
                                                    }`}
                                            >
                                                {lang.name}
                                            </button>
                                        ))}
                                    </div>
                                </div>

                                <div>
                                    <label className="flex items-center">
                                        <input
                                            type="checkbox"
                                            checked={formData.cubic_metr}
                                            onChange={(e) => setFormData({ ...formData, cubic_metr: e.target.checked })}
                                            className="w-4 h-4 text-emerald-800 border-gray-300 rounded focus:ring-emerald-600"
                                        />
                                        <span className="ml-3 text-sm text-gray-700">
                                            –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –º¬≥/—á
                                        </span>
                                    </label>
                                </div>
                            </div>
                        )}

                        {/* –®–∞–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –ø–æ—Å–ª–µ–¥–Ω–∏–π */}
                        {currentStep === totalSteps && (
                            <div className="text-center">
                                {isGenerating ? (
                                    <div className="py-4">
                                        <div className="w-16 h-16 border-4 border-emerald-200 border-t-emerald-800 rounded-full animate-spin mx-auto mb-4"></div>
                                        <h3 className="text-lg font-semibold text-gray-900 mb-2">
                                            {uploadProgress.isUploading ? '–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...' : '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...'}
                                        </h3>

                                        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
                                        {uploadProgress.isUploading && uploadProgress.total > 0 && (
                                            <div className="max-w-md mx-auto mb-4">
                                                <div className="flex justify-between text-sm text-gray-600 mb-2">
                                                    <span>{uploadProgress.progress}%</span>
                                                    <span>
                                                        {(uploadProgress.loaded / 1024 / 1024).toFixed(1)} –∏–∑ {(uploadProgress.total / 1024 / 1024).toFixed(1)} –ú–ë
                                                    </span>
                                                </div>
                                                <div className="w-full bg-gray-200 rounded-full h-2">
                                                    <div
                                                        className="bg-emerald-600 h-2 rounded-full transition-all duration-300"
                                                        style={{ width: `${uploadProgress.progress}%` }}
                                                    ></div>
                                                </div>
                                            </div>
                                        )}

                                        <p className="text-gray-600">
                                            {uploadProgress.isUploading ? '–ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä...' : '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...'}
                                        </p>
                                    </div>
                                ) : (
                                    // –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
                                    <div className="py-4">
                                        <div className="w-16 h-16 bg-emerald-100 rounded-full flex items-center justify-center mx-auto mb-4">
                                            <svg className="w-8 h-8 text-emerald-800" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                            </svg>
                                        </div>
                                        <h3 className="text-lg font-semibold text-gray-900 mb-2">
                                            –ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                                        </h3>
                                        <p className="text-gray-600 mb-6">
                                            –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
                                        </p>
                                        <div className="bg-gray-50 rounded-xl p-4 text-left">
                                            <div className="space-y-2 text-sm">
                                                <div className="flex justify-between">
                                                    <span className="text-gray-600">–¢–∏–ø –æ—Ç—á–µ—Ç–∞:</span>
                                                    <span className="font-medium">{selectedType?.toUpperCase()}</span>
                                                </div>
                                                {formData.data_file && (
                                                    <div className="flex justify-between">
                                                        <span className="text-gray-600">–§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö:</span>
                                                        <span className="font-medium">{formData.data_file?.name}</span>
                                                    </div>
                                                )}
                                                {formData.image && (
                                                    <div className="flex justify-between">
                                                        <span className="text-gray-600">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</span>
                                                        <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
                                                    </div>
                                                )}
                                                {formData.video1 && (
                                                    <div className="flex justify-between">
                                                        <span className="text-gray-600">–í–∏–¥–µ–æ 1:</span>
                                                        <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
                                                    </div>
                                                )}
                                                {formData.video2 && (
                                                    <div className="flex justify-between">
                                                        <span className="text-gray-600">–í–∏–¥–µ–æ 2:</span>
                                                        <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
                                                    </div>
                                                )}
                                                {formData.video && (
                                                    <div className="flex justify-between">
                                                        <span className="text-gray-600">–í–∏–¥–µ–æ:</span>
                                                        <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
                                                    </div>
                                                )}
                                                {formData.docx && (
                                                    <div className="flex justify-between">
                                                        <span className="text-gray-600">–î–æ–∫—É–º–µ–Ω—Ç:</span>
                                                        <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
                                                    </div>
                                                )}
                                                {formData.xlsx && (
                                                    <div className="flex justify-between">
                                                        <span className="text-gray-600">–¢–∞–±–ª–∏—Ü–∞ Excel:</span>
                                                        <span className="font-medium">‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ</span>
                                                    </div>
                                                )}
                                                <div className="flex justify-between">
                                                    <span className="text-gray-600">–Ø–∑—ã–∫:</span>
                                                    <span className="font-medium">
                                                        {languages.find(l => l.code === formData.language)?.name}
                                                    </span>
                                                </div>
                                                <div className="flex justify-between">
                                                    <span className="text-gray-600">–ö—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã:</span>
                                                    <span className="font-medium">{formData.cubic_metr ? '–î–∞' : '–ù–µ—Ç'}</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}
                    </div>

                    {/* Navigation Buttons */}
                    <div className="flex gap-4">
                        {currentStep < totalSteps && (
                            <button
                                onClick={prevStep}
                                className="btn-secondary flex-1"
                                disabled={isGenerating}
                            >
                                –ù–∞–∑–∞–¥
                            </button>
                        )}

                        {currentStep < totalSteps ? (
                            <button
                                onClick={nextStep}
                                className="btn-primary flex-1"
                                disabled={!canProceedToNextStep() || isGenerating}
                            >
                                {steps[currentStep - 1]?.optional ? '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å' : '–î–∞–ª–µ–µ'}
                            </button>
                        ) : (
                            <button
                                onClick={generateReport}
                                className={`flex-1 py-3 px-4 rounded-xl font-medium text-white transition-all duration-200 ${isGenerating
                                        ? 'bg-gray-400 cursor-not-allowed'
                                        : 'bg-emerald-600 hover:bg-emerald-700 active:bg-emerald-800 shadow-lg hover:shadow-xl'
                                    }`}
                                disabled={isGenerating}
                            >
                                {isGenerating ? '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...' : '–°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç'}
                            </button>
                        )}
                    </div>

                </>
            )}
        </div>
    )
}

function FileUploadArea({ type, accept, onFileSelect, selectedFile, optional = false, maxSize, title, dataType }) {
    // –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ç–∏–ø—ã –≤ getIcon()
    const getIcon = () => {
        switch (type) {
            case 'image':
                return (
                    <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                )
            case 'video':
                return (
                    <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
                    </svg>
                )
            case 'docx':
                return (
                    <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                )
            case 'xlsx':
                return (
                    <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                )
            case 'data':
                return (
                    <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                )
            default:
                return (
                    <svg className="w-12 h-12 text-emerald-600 mb-4 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                )
        }
    }

    const getTitle = () => {
        if (title) return title

        switch (type) {
            case 'image':
                return '–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ OPGAL'
            case 'video':
                return '–í—ã–±–µ—Ä–∏—Ç–µ .ts –≤–∏–¥–µ–æ —Ñ–∞–π–ª'
            case 'docx':
                return '–í—ã–±–µ—Ä–∏—Ç–µ .docx –¥–æ–∫—É–º–µ–Ω—Ç'
            case 'xlsx':
                return '–í—ã–±–µ—Ä–∏—Ç–µ .xlsx —Ñ–∞–π–ª'
            case 'data':
                return dataType === 'qogi' ? '–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª' : '–í—ã–±–µ—Ä–∏—Ç–µ XLSX —Ñ–∞–π–ª'
            default:
                return '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª'
        }
    }

    const getDescription = () => {
        if (selectedFile) return '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω'

        let desc = '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞'
        if (maxSize) desc += ` (–¥–æ ${maxSize})`
        if (optional) desc += ' - –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ'

        return desc
    }

    // –û–±–Ω–æ–≤–∏—Ç—å getFileFormat()
    const getFileFormat = () => {
        switch (type) {
            case 'image':
                return 'JPG, PNG, GIF'
            case 'video':
                return '–¢–æ–ª—å–∫–æ .ts —Ñ–∞–π–ª—ã'
            case 'docx':
                return '–¢–æ–ª—å–∫–æ .docx —Ñ–∞–π–ª—ã'
            case 'xlsx':
                return '–¢–æ–ª—å–∫–æ .xlsx —Ñ–∞–π–ª—ã'
            case 'data':
                return dataType === 'qogi' ? 'CSV —Ñ–∞–π–ª—ã' : 'XLSX —Ñ–∞–π–ª—ã'
            default:
                return ''
        }
    }

    return (
        <div className="border-2 border-dashed border-[#006045] rounded-xl p-8 text-center hover:border-emerald-400 transition-colors">
            <input
                type="file"
                accept={accept}
                onChange={(e) => onFileSelect(e.target.files[0])}
                className="hidden"
                id={`file-${type}-${Date.now()}`}
            />
            <label htmlFor={`file-${type}-${Date.now()}`} className="cursor-pointer">
                {getIcon()}
                <div className="text-lg font-medium text-gray-900 mb-2">
                    {selectedFile ? selectedFile.name : getTitle()}
                </div>
                <div className="text-sm text-gray-600 mb-2">
                    {getDescription()}
                </div>
                {getFileFormat() && (
                    <div className="text-xs text-gray-500 mb-4">
                        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {getFileFormat()}
                    </div>
                )}
                {selectedFile ? (
                    <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-emerald-100 text-emerald-800">
                        ‚úì –ì–æ—Ç–æ–≤–æ
                    </div>
                ) : optional ? (
                    <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-600">
                        –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
                    </div>
                ) : (
                    <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-orange-100 text-orange-600">
                        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
                    </div>
                )}
            </label>
        </div>
    )
}